{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nBodhi Prediction Market: the next generation decentralized prediction market\n\n\nhttps://www.bodhi.network/", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Bodhi Prediction Market: the next generation decentralized prediction market  https://www.bodhi.network/", 
            "title": "Welcome"
        }, 
        {
            "location": "/deployment/", 
            "text": "Qtum Testnet\n\n\n\n\nEnter source code dir\n\n\nAssuming tools Solidity \n Ethabi are installed\n\n\nCompile solidity code\n\n\n\n\n$ solc --optimize --bin --abi --hashes --allow-paths libs/* -o bodhitoken --overwrite tokens/BodhiToken.sol\n$ ls bodhitoken\n# corresponding files compiled\nBasicToken.abi           BodhiToken.bin           ERC20.signatures         Ownable.abi              SafeMath.bin             StandardToken.signatures\nBasicToken.bin           BodhiToken.signatures    ERC20Basic.abi           Ownable.bin              SafeMath.signatures      lib\nBasicToken.signatures    ERC20.abi                ERC20Basic.bin           Ownable.signatures       StandardToken.abi\nBodhiToken.abi           ERC20.bin                ERC20Basic.signatures    SafeMath.abi             StandardToken.bin\n\n\n\n\n\n\nEnsure qtum testnet is running\n\n\n\n\n$ bin/qtumd -testnet -logevents\n# `-logevents` is optional for event log, you may be asked to add -reindex if existing local db is init without event logs\n\n\n\n\n\n\nGenerate owner address\n\n\n\n\n$ bin/qtum-cli -testnet getaccountaddress bodhi-owner\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n$ bin/qtum-cli -testnet listaccounts\n{\n  \n: 0.00000000,\n  \nbodhi-owner\n: 0.00000000\n}\n\n\n\n\nNote: \ntestnet\n addresses starts with \nq\n, \nmainnet\n addresses starts with \nQ\n\n\nIf your balance is 0.0, pls request test tokens at http://testnet-faucet.qtum.info/#!/ and verify it:\n\n\n$ bin/qtum-cli -testnet getbalance\n94.00000000\n\n\n\n\n\n\nCopy previous compiled smartcontract binary code\n\n\n\n\n# mac only\n$ cat /yourpath/bodhitoken/BodhiToken.bin | pbcopy\n\n\n\n\n\n\nCreate contract using smartcontract binary code\n\n\n\n\n$ bin/qtum-cli -testnet createcontract 6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a031617905561080d806100396000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166.... 2500000 0.00000049 qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n# Deployment succeeds:\n{\n  \ntxid\n: \n72b0f2eeeb29b6c3ebf5808ec075d07aeedbf37f546c007367ee50bb11300b60\n,\n  \nsender\n: \nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n,\n  \nhash160\n: \ndcc48d3cfd6976545cb9bcf525ebad3a1b60d3bd\n,\n  \naddress\n: \ncde3c5db274b7f38377a66607c5a9ca6889dea3b\n\n}\n\n\n\n\nsender\n should match your own account\n\n\naddress\n is the address for this smart contract\n\n\nhash\n is hash160(sender)\n\n\n\n\nVerification\n\n\n\n\nlist contract in current block, \nhash\n should appear\n\n\n$ bin/qtum-cli -testnet listcontracts\n{\n\nddce483f940efe54a9f46f95486489b65092b68f\n: 0.00000000,\n...\n}\n\n\n\n\nget interface of smart contract\n\n\n$ bin/qtum-cli -testnet getaccountinfo ddce483f940efe54a9f46f95486489b65092b68f\n{\n  \naddress\n: \nddce483f940efe54a9f46f95486489b65092b68f\n,\n  \nbalance\n: 0,\n  \nstorage\n: {\n    \n036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\n: {\n      \n0000000000000000000000000000000000000000000000000000000000000005\n: \n6800000000000000000000000000000000000000000000000000000000000002\n\n    },\n    \n405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace\n: {\n      \n0000000000000000000000000000000000000000000000000000000000000002\n: \n00000000000000000000000000000000000000000000000000000000000001f4\n\n    },\n    \n8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n: {\n      \n0000000000000000000000000000000000000000000000000000000000000004\n: \n0000000000000000000000000000000000000000000000000000000000000001\n\n    },\n    \na50c72e4d7b00e75c6ec9cbfb411824ce1bc8c910cb84e72aed31d83c0caaf5a\n: {\n      \ne5d6541440c456f878016c6ac621d20fa7af44175ddebd0295194adfa766ddf6\n: \n00000000000000000000000000000000000000000000000000000000000001f4\n\n    },\n    \nc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n: {\n      \n0000000000000000000000000000000000000000000000000000000000000003\n: \n7200000000000000000000000000000000000000000000000000000000000002\n\n    },\n    \nf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\n: {\n      \n0000000000000000000000000000000000000000000000000000000000000006\n: \n48312e3000000000000000000000000000000000000000000000000000000008\n\n    }\n  },\n  \ncode\n: \n606060405236156100ad576000357c0100000000000000000...\n\n}\n\n\n\n\n\n\nCall smartcontract\n\n\n\n\nfind available func\n\n\n$ cat /yourpath/bodhitoken/BodhiToken.signatures\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)\n\n\n\n\ncall function. i.e. name\n\n\n$ bin/qtum-cli -testnet callcontract cde3c5db274b7f38377a66607c5a9ca6889dea3b 06fdde03\n{\n  \naddress\n: \ncde3c5db274b7f38377a66607c5a9ca6889dea3b\n,\n  \nexecutionResult\n: {\n    \ngasUsed\n: 21839,\n    \nexcepted\n: \nNone\n,\n    \nnewAddress\n: \ncde3c5db274b7f38377a66607c5a9ca6889dea3b\n,\n    \noutput\n: \n0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\n,\n    \ncodeDeposit\n: 0,\n    \ngasRefunded\n: 0,\n    \ndepositSize\n: 0,\n    \ngasForDeposit\n: 0\n  },\n  \ntransactionReceipt\n: {\n    \nstateRoot\n: \n4f2fd1cc369abf4120a509dc4ffeac19e058ff5e5988d1609ee0b5996cbb752a\n,\n    \ngasUsed\n: 21839,\n    \nbloom\n: \nn,\n    \nlog\n: [\n    ]\n  }\n}\n\n\n\n\nDecode output to verify the correctness\n\n\n$ ethabi decode params -t string 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\nstring Bodhi Token\n\n\n\n\n\n\ncallcontract\n vs \nsendtocontract\n\n\n\n\ncallcontract\n - This will interact with an already deployed smart contract on the Qtum blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas.\n\n\nsendtocontract\n - This will interact with an already deployed smart contract on the Qtum blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas.\n\n\nKovan Testnet\n\n\n\n\nAdd \nkovan\n to networks array in \ntruffle.js\n:\n\n\n\n\nlet TestRPC = require('ethereumjs-testrpc');\n\nmodule.exports = {\n  networks: {\n    development: {\n      host: \nlocalhost\n,\n      port: 8545,\n      network_id: \n*\n // Match any network id\n    },\n    test: {\n      provider: TestRPC.provider(),\n      network_id: \n*\n\n    },\n    /*\n        ADD THIS CODE:\n        Please note I change the port number of Parity\n        because it was interferring with TestRPC's port (8545).\n        You need to edit the config.toml for Parity to match this.\n    */\n    kovan: {\n      host: 'localhost',\n      port: 8547,\n      network_id: '42'\n    }\n  }\n};\n\n\n\n\n\n\nMake sure Parity is running on the kovan chain: \nparity --chain=kovan\n\n\nEdit the \nconfig.js\n as necessary. Here was my values that I used:\n\n\n\n\nfunction Config(web3) {\n  return {\n    startBlock: 3584300,\n    endBlock: 3605900,\n    initialExchangeRate: 100,\n    presaleAmount: web3.toWei(30e6)\n  }\n};\n\n\n\n\n\n\nMake sure you have your Parity console open: \nhttp://127.0.0.1:8180/\n\n\ntruffle compile\n\n\ntruffle migrate --reset --network=kovan\n\n\nYou will get notifications in your Parity console to approve the transactions by entering your password. I had to do a total of 4 approvals before my contract was fully deployed.\n\n\nHere was the output on the command line:\n\n\n\n\nUsing network 'kovan'.\n\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x6c7c545bb3e4c22a74d32bacc3b56e08b71db80d06f7058c047bed6d5adb3fe4\n  Migrations: 0xaafbe4d72858fa105ec886565d79d196e70fc396\nSaving successful migration to network...\n  ... 0xf2bae05225ab7e02106ea96f6525c8a5f4f9e2466af7849faf058233cde13539\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying BodhiToken...\n  ... 0x1531244586220979c3fba5e94d0ff58194b1255196dc99874e63fd0bebdbeb7f\n  BodhiToken: 0x94d94ee28e164ba0ba44ac03f208293d4196c73f\nSaving successful migration to network...\n  ... 0x7ed4922045102c65f16d109de4dd6ba1e21a84774313b9403c3bc4d923af9806\nSaving artifacts...\n\n\n\n\n\n\nIn the \nSigner\n tab of \nParity\n console you can see the accepted transactions. You can click on the address to see the transaction in \netherscan\n.", 
            "title": "Deployment"
        }, 
        {
            "location": "/deployment/#qtum-testnet", 
            "text": "Enter source code dir  Assuming tools Solidity   Ethabi are installed  Compile solidity code   $ solc --optimize --bin --abi --hashes --allow-paths libs/* -o bodhitoken --overwrite tokens/BodhiToken.sol\n$ ls bodhitoken\n# corresponding files compiled\nBasicToken.abi           BodhiToken.bin           ERC20.signatures         Ownable.abi              SafeMath.bin             StandardToken.signatures\nBasicToken.bin           BodhiToken.signatures    ERC20Basic.abi           Ownable.bin              SafeMath.signatures      lib\nBasicToken.signatures    ERC20.abi                ERC20Basic.bin           Ownable.signatures       StandardToken.abi\nBodhiToken.abi           ERC20.bin                ERC20Basic.signatures    SafeMath.abi             StandardToken.bin   Ensure qtum testnet is running   $ bin/qtumd -testnet -logevents\n# `-logevents` is optional for event log, you may be asked to add -reindex if existing local db is init without event logs   Generate owner address   $ bin/qtum-cli -testnet getaccountaddress bodhi-owner\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n$ bin/qtum-cli -testnet listaccounts\n{\n   : 0.00000000,\n   bodhi-owner : 0.00000000\n}  Note:  testnet  addresses starts with  q ,  mainnet  addresses starts with  Q  If your balance is 0.0, pls request test tokens at http://testnet-faucet.qtum.info/#!/ and verify it:  $ bin/qtum-cli -testnet getbalance\n94.00000000   Copy previous compiled smartcontract binary code   # mac only\n$ cat /yourpath/bodhitoken/BodhiToken.bin | pbcopy   Create contract using smartcontract binary code   $ bin/qtum-cli -testnet createcontract 6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a031617905561080d806100396000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166.... 2500000 0.00000049 qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n# Deployment succeeds:\n{\n   txid :  72b0f2eeeb29b6c3ebf5808ec075d07aeedbf37f546c007367ee50bb11300b60 ,\n   sender :  qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN ,\n   hash160 :  dcc48d3cfd6976545cb9bcf525ebad3a1b60d3bd ,\n   address :  cde3c5db274b7f38377a66607c5a9ca6889dea3b \n}  sender  should match your own account  address  is the address for this smart contract  hash  is hash160(sender)   Verification   list contract in current block,  hash  should appear  $ bin/qtum-cli -testnet listcontracts\n{ ddce483f940efe54a9f46f95486489b65092b68f : 0.00000000,\n...\n}  get interface of smart contract  $ bin/qtum-cli -testnet getaccountinfo ddce483f940efe54a9f46f95486489b65092b68f\n{\n   address :  ddce483f940efe54a9f46f95486489b65092b68f ,\n   balance : 0,\n   storage : {\n     036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0 : {\n       0000000000000000000000000000000000000000000000000000000000000005 :  6800000000000000000000000000000000000000000000000000000000000002 \n    },\n     405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace : {\n       0000000000000000000000000000000000000000000000000000000000000002 :  00000000000000000000000000000000000000000000000000000000000001f4 \n    },\n     8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b : {\n       0000000000000000000000000000000000000000000000000000000000000004 :  0000000000000000000000000000000000000000000000000000000000000001 \n    },\n     a50c72e4d7b00e75c6ec9cbfb411824ce1bc8c910cb84e72aed31d83c0caaf5a : {\n       e5d6541440c456f878016c6ac621d20fa7af44175ddebd0295194adfa766ddf6 :  00000000000000000000000000000000000000000000000000000000000001f4 \n    },\n     c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b : {\n       0000000000000000000000000000000000000000000000000000000000000003 :  7200000000000000000000000000000000000000000000000000000000000002 \n    },\n     f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f : {\n       0000000000000000000000000000000000000000000000000000000000000006 :  48312e3000000000000000000000000000000000000000000000000000000008 \n    }\n  },\n   code :  606060405236156100ad576000357c0100000000000000000... \n}   Call smartcontract   find available func  $ cat /yourpath/bodhitoken/BodhiToken.signatures\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)  call function. i.e. name  $ bin/qtum-cli -testnet callcontract cde3c5db274b7f38377a66607c5a9ca6889dea3b 06fdde03\n{\n   address :  cde3c5db274b7f38377a66607c5a9ca6889dea3b ,\n   executionResult : {\n     gasUsed : 21839,\n     excepted :  None ,\n     newAddress :  cde3c5db274b7f38377a66607c5a9ca6889dea3b ,\n     output :  0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000 ,\n     codeDeposit : 0,\n     gasRefunded : 0,\n     depositSize : 0,\n     gasForDeposit : 0\n  },\n   transactionReceipt : {\n     stateRoot :  4f2fd1cc369abf4120a509dc4ffeac19e058ff5e5988d1609ee0b5996cbb752a ,\n     gasUsed : 21839,\n     bloom :  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ,\n     log : [\n    ]\n  }\n}  Decode output to verify the correctness  $ ethabi decode params -t string 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\nstring Bodhi Token   callcontract  vs  sendtocontract   callcontract  - This will interact with an already deployed smart contract on the Qtum blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas.  sendtocontract  - This will interact with an already deployed smart contract on the Qtum blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas.", 
            "title": "Qtum Testnet"
        }, 
        {
            "location": "/deployment/#kovan-testnet", 
            "text": "Add  kovan  to networks array in  truffle.js :   let TestRPC = require('ethereumjs-testrpc');\n\nmodule.exports = {\n  networks: {\n    development: {\n      host:  localhost ,\n      port: 8545,\n      network_id:  *  // Match any network id\n    },\n    test: {\n      provider: TestRPC.provider(),\n      network_id:  * \n    },\n    /*\n        ADD THIS CODE:\n        Please note I change the port number of Parity\n        because it was interferring with TestRPC's port (8545).\n        You need to edit the config.toml for Parity to match this.\n    */\n    kovan: {\n      host: 'localhost',\n      port: 8547,\n      network_id: '42'\n    }\n  }\n};   Make sure Parity is running on the kovan chain:  parity --chain=kovan  Edit the  config.js  as necessary. Here was my values that I used:   function Config(web3) {\n  return {\n    startBlock: 3584300,\n    endBlock: 3605900,\n    initialExchangeRate: 100,\n    presaleAmount: web3.toWei(30e6)\n  }\n};   Make sure you have your Parity console open:  http://127.0.0.1:8180/  truffle compile  truffle migrate --reset --network=kovan  You will get notifications in your Parity console to approve the transactions by entering your password. I had to do a total of 4 approvals before my contract was fully deployed.  Here was the output on the command line:   Using network 'kovan'.\n\nRunning migration: 1_initial_migration.js\n  Replacing Migrations...\n  ... 0x6c7c545bb3e4c22a74d32bacc3b56e08b71db80d06f7058c047bed6d5adb3fe4\n  Migrations: 0xaafbe4d72858fa105ec886565d79d196e70fc396\nSaving successful migration to network...\n  ... 0xf2bae05225ab7e02106ea96f6525c8a5f4f9e2466af7849faf058233cde13539\nSaving artifacts...\nRunning migration: 2_deploy_contracts.js\n  Deploying BodhiToken...\n  ... 0x1531244586220979c3fba5e94d0ff58194b1255196dc99874e63fd0bebdbeb7f\n  BodhiToken: 0x94d94ee28e164ba0ba44ac03f208293d4196c73f\nSaving successful migration to network...\n  ... 0x7ed4922045102c65f16d109de4dd6ba1e21a84774313b9403c3bc4d923af9806\nSaving artifacts...   In the  Signer  tab of  Parity  console you can see the accepted transactions. You can click on the address to see the transaction in  etherscan .", 
            "title": "Kovan Testnet"
        }, 
        {
            "location": "/help/", 
            "text": "Help\n\n\nMkdocs Markdown\n\n\nFor full documentation visit \nmkdocs.org\n.", 
            "title": "Help"
        }, 
        {
            "location": "/help/#help", 
            "text": "", 
            "title": "Help"
        }, 
        {
            "location": "/help/#mkdocs-markdown", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Mkdocs Markdown"
        }
    ]
}
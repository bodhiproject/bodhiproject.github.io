{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nBodhi Prediction Market: the next generation decentralized prediction market\n\n\n\n\nhttps://www.bodhi.network/\n\n\n\n\nhttps://github.com/bodhiproject\n\n\n\n\nhttps://t.me/bodhifoundation\n\n\n\n\nhttps://twitter.com/bodhitoken\n\n\n\n\nhttps://medium.com/@bodhitoken", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Bodhi Prediction Market: the next generation decentralized prediction market   https://www.bodhi.network/   https://github.com/bodhiproject   https://t.me/bodhifoundation   https://twitter.com/bodhitoken   https://medium.com/@bodhitoken", 
            "title": "Welcome"
        }, 
        {
            "location": "/bodhi_token/info/", 
            "text": "Deployed Contracts\n\n\nQTUM Mainnet\n\n\n\n\n6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\n\n\n\n\nQTUM Testnet\n\n\n\n\na619b1a87d4f17fb56e347887b971094918b016c\n\n\n\n\nBOT Units\n\n\n\n\n8 decimals\n\n\n1 Botoshi = lowest denomination of BOT\n\n\n100000000 Botoshi = 1 BOT\n\n\n\n\nInterface (ABI)\n\n\n\n[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\n\n\n\nCopy ABI\n\n\nCopied!\n\n\nFunction Signatures\n\n\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)\n\n\n\nEvent Hashes\n\n\nevent Mint(uint256 supply, address indexed to, uint256 amount): \n4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value):\nddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", 
            "title": "Info"
        }, 
        {
            "location": "/bodhi_token/info/#deployed-contracts", 
            "text": "QTUM Mainnet   6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7   QTUM Testnet   a619b1a87d4f17fb56e347887b971094918b016c", 
            "title": "Deployed Contracts"
        }, 
        {
            "location": "/bodhi_token/info/#bot-units", 
            "text": "8 decimals  1 Botoshi = lowest denomination of BOT  100000000 Botoshi = 1 BOT", 
            "title": "BOT Units"
        }, 
        {
            "location": "/bodhi_token/info/#interface-abi", 
            "text": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]  Copy ABI  Copied!", 
            "title": "Interface (ABI)"
        }, 
        {
            "location": "/bodhi_token/info/#function-signatures", 
            "text": "dd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)", 
            "title": "Function Signatures"
        }, 
        {
            "location": "/bodhi_token/info/#event-hashes", 
            "text": "event Mint(uint256 supply, address indexed to, uint256 amount): \n4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value):\nddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", 
            "title": "Event Hashes"
        }, 
        {
            "location": "/bodhi_token/qbao/", 
            "text": "Downloads\n\n\n\n\nQBao mobile apps:\n\n\nAndroid\n\n\niOS: link coming soon\n\n\n\n\n\n\n\n\nSend BOT\n\n\n\n\nDownload and launch the mobile app\n\n\n\n\nClick on \nBOT\n in the list of different tokens\n\n\n\n\n\n\n\n\nClick on \nTransfer\n button\n\n\n\n\n\n\n\n\nEnter the \nReceiver Address\n of the person you are sending it to\n\n\n\n\nEnter the \nAmount\n to send in decimal format\n\n\n\n\nMake sure \nBOT\n is selected in the dropdown menu\n\n\n\n\n\n\n\n\nClick the \nConfirm Transfer\n button\n\n\n\n\n\n\nWait for your transaction to be mined\n\n\n\n\n\n\n\n\nReceive BOT\n\n\n\n\nDownload and launch the mobile app\n\n\n\n\nClick on the \nQR Code\n button\n\n\n\n\n\n\n\n\nClick the \nCopy Address\n button\n\n\n\n\n\n\n\n\nGive that address to the person sending the BOT to you", 
            "title": "QBao (Mobile)"
        }, 
        {
            "location": "/bodhi_token/qbao/#downloads", 
            "text": "QBao mobile apps:  Android  iOS: link coming soon", 
            "title": "Downloads"
        }, 
        {
            "location": "/bodhi_token/qbao/#send-bot", 
            "text": "Download and launch the mobile app   Click on  BOT  in the list of different tokens     Click on  Transfer  button     Enter the  Receiver Address  of the person you are sending it to   Enter the  Amount  to send in decimal format   Make sure  BOT  is selected in the dropdown menu     Click the  Confirm Transfer  button    Wait for your transaction to be mined", 
            "title": "Send BOT"
        }, 
        {
            "location": "/bodhi_token/qbao/#receive-bot", 
            "text": "Download and launch the mobile app   Click on the  QR Code  button     Click the  Copy Address  button     Give that address to the person sending the BOT to you", 
            "title": "Receive BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/", 
            "text": "Downloads\n\n\n\n\nQtum mobile apps:\n\n\nAndroid\n\n\niOS\n\n\n\n\n\n\n\n\nWatch BOT\n\n\n\n\nDownload the mobile app and launch it\n\n\n\n\nClick on \nProfile\n tab\n\n\n\n\n\n\n\n\nClick on \nSmart Contracts\n\n\n\n\n\n\n\n\nClick on \nWatch Token\n\n\n\n\n\n\n\n\nAdd \nToken Name\n: BOT\n\n\n\n\nCopy/paste the \nToken Address\n (see \nDeployed Contracts\n Mainnet address above)\n\n\nCopy/paste the \nABI Interface\n (see \nInterface (ABI)\n above)\n\n\n\n\nClick \nOK\n button\n\n\n\n\n\n\n\n\nSend BOT\n\n\n\n\nDownload the mobile app and launch it\n\n\nFollow steps to \nWatch Bot\n\n\n\n\nClick on \nSend\n Tab\n\n\n\n\n\n\n\n\nAdd the \nReceiver's Address\n of the person you want to send BOT to\n\n\n\n\nClick \nChoose Token\n dropdown and select \nBOT\n\n\n\n\nEnter the \nAmount\n to send in decimal format\n\n\n\n\n\n\n\n\nClick the \nSend\n button\n\n\n\n\nWait for the transaction to be mined\n\n\n\n\nReceive BOT\n\n\n\n\nDownload the mobile app and launch it\n\n\nThe address shown in the \nWallet\n tab is your main address\n\n\n\n\nClick on the \n+\n sign next to the address\n\n\n\n\n\n\n\n\nClick on the \nCopy Wallet Address\n button\n\n\n\n\n\n\n\n\nGive that address to the person sending the BOT to you", 
            "title": "Qtum Wallet (Mobile)"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#downloads", 
            "text": "Qtum mobile apps:  Android  iOS", 
            "title": "Downloads"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#watch-bot", 
            "text": "Download the mobile app and launch it   Click on  Profile  tab     Click on  Smart Contracts     Click on  Watch Token     Add  Token Name : BOT   Copy/paste the  Token Address  (see  Deployed Contracts  Mainnet address above)  Copy/paste the  ABI Interface  (see  Interface (ABI)  above)   Click  OK  button", 
            "title": "Watch BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#send-bot", 
            "text": "Download the mobile app and launch it  Follow steps to  Watch Bot   Click on  Send  Tab     Add the  Receiver's Address  of the person you want to send BOT to   Click  Choose Token  dropdown and select  BOT   Enter the  Amount  to send in decimal format     Click the  Send  button   Wait for the transaction to be mined", 
            "title": "Send BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#receive-bot", 
            "text": "Download the mobile app and launch it  The address shown in the  Wallet  tab is your main address   Click on the  +  sign next to the address     Click on the  Copy Wallet Address  button     Give that address to the person sending the BOT to you", 
            "title": "Receive BOT"
        }, 
        {
            "location": "/bodhi_token/qt_wallet_desktop/", 
            "text": "Watch BOT\n\n\n\n\nLaunch QT Wallet\n\n\n\n\nIn the \nOverview\n tab, click the \nAdd Token\n button\n\n\n\n\n\n\n\n\nCopy/paste the token address in \nContract Address\n\n\n\n\nSelect the \nToken Address\n which you would like to monitor BOT activity on\n\n\n\n\nClick on the \nConfirm\n button\n\n\n\n\n\n\n\n\nYou should now see \nBOT\n being monitored in the \nOverview\n and \nQRC Token\n tabs\n\n\n\n\n\n\n\n\nSend BOT via QRC Token tab (Easy)\n\n\n\n\nLaunch QT Wallet\n\n\nWatch BOT\n\n\n\n\nIn the \nQRC Token\n tab, click the \nSend\n button and select an account which contains some BOT\n\n\n\n\n\n\n\n\nIn the \nPayTo\n field, add the address you would like to send BOT to\n\n\n\n\nIn the \nAmount\n field, type in the amount to send in decimal format\n\n\n\n\n(Optional) In the \nDescription\n field, add a note for reference\n\n\n\n\n\n\n\n\nClick the \nConfirm\n button, then a popup window will appear to confirm\n\n\n\n\n\n\nWait for the timer in the \nYes\n button to finish, then click it\n\n\n\n\n\n\n\n\nWait until your transaction is mined\n\n\n\n\n\n\n\n\nSend BOT via Smart Contract tab (Harder)\n\n\n\n\nLaunch QT Wallet\n\n\n\n\nClick on \nSmart Contract\n \n \nSendTo\n\n\n\n\n\n\n\n\nCopy/paste the \nContract Address\n\n\n\n\nCopy/paste the \nBodhiToken ABI\n\n\nSelect \nFunction\n \n \ntransfer(a9059cbb)\n\n\nGet the \nhash address\n you want to send to and paste it\n\n\nType in the value as the amount to send (in \nBotoshi\n) to that address\n\n\n\n\nSelect the \nSender Address\n at the bottom as the address that contains the BOT\n\n\n\n\n\n\n\n\nClick the \nSend To Contract\n button\n\n\n\n\n\n\nWait for your transaction to be mined\n\n\n\n\n\n\n\n\nReceive BOT\n\n\n\n\nLaunch QT Wallet\n\n\n\n\nClick on \nFile\n \n \nReceiving addresses...\n\n\n\n\n\n\n\n\nSelect the address you would like the BOT sent to then click \nCopy\n\n\n\n\n\n\n\n\nGive that address to the person sending the BOT to you", 
            "title": "QT Wallet (Desktop)"
        }, 
        {
            "location": "/bodhi_token/qt_wallet_desktop/#watch-bot", 
            "text": "Launch QT Wallet   In the  Overview  tab, click the  Add Token  button     Copy/paste the token address in  Contract Address   Select the  Token Address  which you would like to monitor BOT activity on   Click on the  Confirm  button     You should now see  BOT  being monitored in the  Overview  and  QRC Token  tabs", 
            "title": "Watch BOT"
        }, 
        {
            "location": "/bodhi_token/qt_wallet_desktop/#send-bot-via-qrc-token-tab-easy", 
            "text": "Launch QT Wallet  Watch BOT   In the  QRC Token  tab, click the  Send  button and select an account which contains some BOT     In the  PayTo  field, add the address you would like to send BOT to   In the  Amount  field, type in the amount to send in decimal format   (Optional) In the  Description  field, add a note for reference     Click the  Confirm  button, then a popup window will appear to confirm    Wait for the timer in the  Yes  button to finish, then click it     Wait until your transaction is mined", 
            "title": "Send BOT via QRC Token tab (Easy)"
        }, 
        {
            "location": "/bodhi_token/qt_wallet_desktop/#send-bot-via-smart-contract-tab-harder", 
            "text": "Launch QT Wallet   Click on  Smart Contract     SendTo     Copy/paste the  Contract Address   Copy/paste the  BodhiToken ABI  Select  Function     transfer(a9059cbb)  Get the  hash address  you want to send to and paste it  Type in the value as the amount to send (in  Botoshi ) to that address   Select the  Sender Address  at the bottom as the address that contains the BOT     Click the  Send To Contract  button    Wait for your transaction to be mined", 
            "title": "Send BOT via Smart Contract tab (Harder)"
        }, 
        {
            "location": "/bodhi_token/qt_wallet_desktop/#receive-bot", 
            "text": "Launch QT Wallet   Click on  File     Receiving addresses...     Select the address you would like the BOT sent to then click  Copy     Give that address to the person sending the BOT to you", 
            "title": "Receive BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/", 
            "text": "Downloads\n\n\n\n\nQT wallet/qtum-cli - find latest release and download installer:\n\n\nhttps://github.com/qtumproject/qtum/releases\n\n\n\n\n\n\nEthabi\n\n\nhttps://github.com/paritytech/ethabi\n \n\n\n\n\n\n\n\n\nLaunch Qtum daemon\n\n\nIn your Terminal window, go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run:\n\n\n$ ./qtumd --logevents\n\n\n\nTo reindex the chain:\n\n\n$ ./qtumd --logevents --reindex\n\n\n\nEncode address to hex\n\n\n$ ./qtum-cli gethexaddress QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# hash address:\nd965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n$ ethabi encode params -v address d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n# encoded address with ethabi (padded to 32 bytes):\n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n\n\nSend BOT\n\n\n\n\nLaunch Qtum daemon\n\n\nOpen a new Terminal tab\n\n\n\n\nTransfer BOT using \ntransfer(address, uint256)\n:\n\n\n# sendtocontract help\nArguments:\n1. \"contractAddress\" (string, required) The contract address that will receive the funds and data.\n2. \"dataHex\"  (string, required) data to send.\n3. \"amount\"      (numeric or string, optional) The amount in QTUM to send. eg 0.1, default: 0\n4. gasLimit  (numeric or string, optional) gasLimit, default: 250000, max: 40000000\n5. gasPrice  (numeric or string, optional) gasPrice Qtum price per gas unit, default: 0.0000004, min:0.0000004\n6. \"senderAddress\" (string, optional) The quantum address that will be used as sender.\n\n$ ./qtum-cli sendtocontract contractAddress dataHex amount gasLimit gasPrice senderAddress\n\n\n\nConstructing the \ndataHex\n for \ntransfer(address, uint256)\n:\n\n\nThis data string is a hex string of data which consists of the function name and it's parameters. All parts of hex strings need to be concatenated together with no space in between. Each parameter should be encoded to 32 bytes.\n\n\n\n\nFunction name: \ntransfer(address,uint256)\n = \nfunction signature\n: \na9059cbb\n\n\nFirst param: \naddress\n = recipient \nencoded address\n to send BOT to: \n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n\nSecond parameter: \nuint256\n = amount to send to in lowest denomination of BOT (Botoshi). \n$ ethabi encode params -v uint 10000 --lenient\n0000000000000000000000000000000000000000000000000000000000002710\n\n\n\n\n\n\n\nNow we have all the params we need encoded properly:\n\n\na9059cbb # function param\n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 # address param\n0000000000000000000000000000000000000000000000000000000000002710 # uint256 param\n\n# dataHex concatenated without any spaces:\na9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710\n\n\n\nFinally the last arguments needed in the call:\n\n\n# other parameters needed:\n# amount = 0 (no QTUM to send)\n# gasLimit = 250000 (default)\n# gasPrice = 0.0000004 (default)\n# senderAddress = QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF (address that is transferring BOT)\n\n\n\nExecute the transfer():\n\n\n$ ./qtum-cli sendtocontract f13f51550faaf698d09fdcc74d79335bfe19e062 a9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710 0 250000 0.0000004 QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# transaction receipt\n{\n  \"txid\": \"25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\",\n  \"sender\": \"QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\",\n  \"hash160\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n}\n\n\n\n\n\n\n\nCheck for transaction to be mined:\n\n\n# $ ./qtum-cli gettransaction txid\n$ ./qtum-cli gettransaction 25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\n\n# look at \"confirmations\" to be 1 or more\n{\n    \"amount\": 0.00000000,\n    \"fee\": -0.10120000,\n    \"confirmations\": 0, # once this hits 1 confirmation, you can check the balance\n    \"blockhash\": \"c7eb9ff50dafc4c8c0b0e519eeea8dc98be5209d82e2a49c88be6173796bef75\",\n    \"blockindex\": 2,\n    \"blocktime\": 1511152112,\n    \"txid\": \"25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\",\n    \"walletconflicts\": [\n    ],\n    \"time\": 1511152081,\n    \"timereceived\": 1511152081,\n    \"bip125-replaceable\": \"no\",\n    \"details\": [\n    {\n      \"account\": \"\",\n      \"category\": \"send\",\n      \"amount\": 0.00000000,\n      \"vout\": 0,\n      \"fee\": -0.10120000,\n      \"abandoned\": false\n    }, \n    {\n      \"account\": \"\",\n      \"address\": \"qKjn4fStBaAtwGiwueJf9qFxgpbAvf1xAy\",\n      \"category\": \"send\",\n      \"amount\": -91.78832400,\n      \"label\": \"main\",\n      \"vout\": 1,\n      \"fee\": -0.10120000,\n      \"abandoned\": false\n    }, \n    {\n      \"account\": \"main\",\n      \"address\": \"qKjn4fStBaAtwGiwueJf9qFxgpbAvf1xAy\",\n      \"category\": \"receive\",\n      \"amount\": 91.78832400,\n      \"label\": \"main\",\n      \"vout\": 1\n    }\n    ],\n    \"hex\": \"020000000106752a723b35434e877b7b4bf30635df1a46690563711324721dec800e38d79d000000006b483045022100de725038c8d2e1474b88f0c04121f18ad644596b527f65ff43732e5ee47394360220240812330bcf00a41e79e63f3e2d660d76e4dc13286653015385e5dff2638b8e0121038e8b6337a06712e40277d339b4643897e62b337b66eea2d8dd069812d7feb0a3feffffff0200000000000000006301040390d003012844a9059cbb00000000000000000000000074fafd43036239029a5dabc9463009daf4ef4a7c0000000000000000000000000000000000000000000000000000000005f5e10014f6177bc9812eeb531907621af6641a41133dea9ec210de1923020000001976a91417e7888aa7412a735f336d2f6d784caefabb6fa388ac8b8a0000\"\n}\n\n\n\n\n\n\n\nReceive BOT\n\n\n\n\nLaunch Qtum daemon\n\n\nOpen a new Terminal tab\n\n\n\n\nList your accounts:\n\n\n$ ./qtum-cli listaddressgroupings\n[\n  [\n    [\n      \"qKjn4fStBaAtwGiwueJf9qFxgpbAvf1xAy\", \n      91.78832400, \n      \"main\"\n    ]\n  ]\n]\n\n\n\n\n\n\n\nPick an address to receive and give that to the person sending you the BOT\n\n\n\n\n\n\nCheck BOT balance\n\n\n\n\nLaunch Qtum daemon\n\n\n\n\nUse \ncallcontract\n to check the balance:\n\n\n\n\nFunction name: \nbalanceOf(address)\n = \nfunction signature\n: \n70a08231\n\n\nFirst param: \naddress\n = \nencoded address\n to check balanceOf\n# $ ./qtum-cli callcontract contractAddress dataHex\n# dataHex:\n# function signature: 70a08231 \n# address: 0000000000000000000000004cb69aae6761e52413b948ad10689cc2428e2ef7\n$ ./qtum-cli callcontract f13f51550faaf698d09fdcc74d79335bfe19e062 70a082310000000000000000000000004cb69aae6761e52413b948ad10689cc2428e2ef7\n{\n  \"address\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n  \"executionResult\": {\n    \"gasUsed\": 23404,\n    \"excepted\": \"None\",\n    \"newAddress\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n    \"output\": \"000000000000000000000000000000000000000000000000000000000000015e\", # result\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"a040c9b3ba184d57ae0942fb70dfdeba9c436809ec66c855b2d15441c46824d8\",\n    \"gasUsed\": 23404,\n    \"bloomn    \"log\": [\n    ]\n  }\n}\n\n# output: 000000000000000000000000000000000000000000000000000000000000015e\n# converted to decimal format = 350\n\n\n\n\n\n\n\n\n\n\n\nParse Events with ethabi\n\n\n\n\nLaunch Qtum daemon\n\n\nOpen a new Terminal tab\n\n\nCopy the \nABI\n to a file named \nBodhiToken.json\n and save it\n\n\n\n\nHow to construct the \nethabi decode log\n\n\nethabi decode log \nabi-path\n \nevent-name\n [-l \ntopic\n]... \ndata\n\n# note that each \"topic\" needs to be preceeded by \"-l\"\n\n\n\n\n\n\n\nParsing event Transfer(address indexed _from, address indexed _to, uint256 _value):\n\n\na. Get all Transfer events\n\n\n$ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]}'\n# searchlogs = command to search through transactions on the blockchain\n# 1 = starting block number\n# -1 = ending block number (-1 goes to the latest block)\n# addresses = BOT contract address\n# topics = hashes of the events to watch, ie. this is the hash of the Transfer event.\n\n# sample Transfer event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"c79bcecae6bc7611b56960be0c3c2041f9e3ebfc2e73da0357462078361ba06f\",\n        \"blockNumber\": 46831,\n        \"transactionHash\": \"32c6874925aa0d400fad4c655283ab6c18d84c003f4e4f8c3cac32675d2eff5b\",\n        \"transactionIndex\": 8,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 21422, \n        \"gasUsed\": 21422,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\", \n                    \"000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed\"\n                ],\n                \"data\": \"0000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]\n\n\n\nb. Parse the Transfer event:\n\n\n$ ethabi decode log ~/Desktop/BodhiToken.json Transfer -l ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 -l 000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed 0000000000000000000000000000000000000000000000000000000005f5e100\n\n_from d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n_to c0d3421708f1574e00959c082e75a77ff4770bed\n_value 0000000000000000000000000000000000000000000000000000000005f5e100\n# the values \"_from\", \"_to\", and \"_value\" are printed out neatly\n\n\n\n\n\n\n\nParsing event Mint(uint256 supply, address indexed to, uint256 amount):\n\n\na. Get all Mint events:\n\n\n$ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\"]}'\n\n# sample Mint event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"8d30c1b633b5dd90f159f146e0f919b2b6271afa8c302d06fb4ed04ec733c0b8\",\n        \"blockNumber\": 46828,\n        \"transactionHash\": \"ba58122f413cb00ca83262f6be87c57b48b08bf100d90ebb5285c84b018f1d2c\",\n        \"transactionIndex\": 9,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 51789,\n        \"gasUsed\": 51789,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n                ],\n                \"data\": \"00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]\n\n\n\nb. Parse the Mint event:\n\n\n$ ethabi decode log ~/Desktop/BodhiToken.json Mint -l 4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6 -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\n\nsupply 00000000000000000000000000000000000000000000000000038d7ec889c600\nto d965cdc9eff7412a278cd9dd7dc32e022b7bada4\namount 0000000000000000000000000000000000000000000000000000000005f5e100\n# this neatly prints out the values for \"supply\", \"to\", and \"amount\"", 
            "title": "Qtum-cli (Desktop)"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#downloads", 
            "text": "QT wallet/qtum-cli - find latest release and download installer:  https://github.com/qtumproject/qtum/releases    Ethabi  https://github.com/paritytech/ethabi", 
            "title": "Downloads"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#launch-qtum-daemon", 
            "text": "In your Terminal window, go to your  qtum-x.xx.x/bin  folder that you installed it in and run:  $ ./qtumd --logevents  To reindex the chain:  $ ./qtumd --logevents --reindex", 
            "title": "Launch Qtum daemon"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#encode-address-to-hex", 
            "text": "$ ./qtum-cli gethexaddress QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# hash address:\nd965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n$ ethabi encode params -v address d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n# encoded address with ethabi (padded to 32 bytes):\n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4", 
            "title": "Encode address to hex"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#send-bot", 
            "text": "Launch Qtum daemon  Open a new Terminal tab   Transfer BOT using  transfer(address, uint256) :  # sendtocontract help\nArguments:\n1. \"contractAddress\" (string, required) The contract address that will receive the funds and data.\n2. \"dataHex\"  (string, required) data to send.\n3. \"amount\"      (numeric or string, optional) The amount in QTUM to send. eg 0.1, default: 0\n4. gasLimit  (numeric or string, optional) gasLimit, default: 250000, max: 40000000\n5. gasPrice  (numeric or string, optional) gasPrice Qtum price per gas unit, default: 0.0000004, min:0.0000004\n6. \"senderAddress\" (string, optional) The quantum address that will be used as sender.\n\n$ ./qtum-cli sendtocontract contractAddress dataHex amount gasLimit gasPrice senderAddress  Constructing the  dataHex  for  transfer(address, uint256) :  This data string is a hex string of data which consists of the function name and it's parameters. All parts of hex strings need to be concatenated together with no space in between. Each parameter should be encoded to 32 bytes.   Function name:  transfer(address,uint256)  =  function signature :  a9059cbb  First param:  address  = recipient  encoded address  to send BOT to:  000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4  Second parameter:  uint256  = amount to send to in lowest denomination of BOT (Botoshi).  $ ethabi encode params -v uint 10000 --lenient\n0000000000000000000000000000000000000000000000000000000000002710    Now we have all the params we need encoded properly:  a9059cbb # function param\n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 # address param\n0000000000000000000000000000000000000000000000000000000000002710 # uint256 param\n\n# dataHex concatenated without any spaces:\na9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710  Finally the last arguments needed in the call:  # other parameters needed:\n# amount = 0 (no QTUM to send)\n# gasLimit = 250000 (default)\n# gasPrice = 0.0000004 (default)\n# senderAddress = QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF (address that is transferring BOT)  Execute the transfer():  $ ./qtum-cli sendtocontract f13f51550faaf698d09fdcc74d79335bfe19e062 a9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710 0 250000 0.0000004 QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# transaction receipt\n{\n  \"txid\": \"25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\",\n  \"sender\": \"QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\",\n  \"hash160\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n}    Check for transaction to be mined:  # $ ./qtum-cli gettransaction txid\n$ ./qtum-cli gettransaction 25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\n\n# look at \"confirmations\" to be 1 or more\n{\n    \"amount\": 0.00000000,\n    \"fee\": -0.10120000,\n    \"confirmations\": 0, # once this hits 1 confirmation, you can check the balance\n    \"blockhash\": \"c7eb9ff50dafc4c8c0b0e519eeea8dc98be5209d82e2a49c88be6173796bef75\",\n    \"blockindex\": 2,\n    \"blocktime\": 1511152112,\n    \"txid\": \"25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\",\n    \"walletconflicts\": [\n    ],\n    \"time\": 1511152081,\n    \"timereceived\": 1511152081,\n    \"bip125-replaceable\": \"no\",\n    \"details\": [\n    {\n      \"account\": \"\",\n      \"category\": \"send\",\n      \"amount\": 0.00000000,\n      \"vout\": 0,\n      \"fee\": -0.10120000,\n      \"abandoned\": false\n    }, \n    {\n      \"account\": \"\",\n      \"address\": \"qKjn4fStBaAtwGiwueJf9qFxgpbAvf1xAy\",\n      \"category\": \"send\",\n      \"amount\": -91.78832400,\n      \"label\": \"main\",\n      \"vout\": 1,\n      \"fee\": -0.10120000,\n      \"abandoned\": false\n    }, \n    {\n      \"account\": \"main\",\n      \"address\": \"qKjn4fStBaAtwGiwueJf9qFxgpbAvf1xAy\",\n      \"category\": \"receive\",\n      \"amount\": 91.78832400,\n      \"label\": \"main\",\n      \"vout\": 1\n    }\n    ],\n    \"hex\": \"020000000106752a723b35434e877b7b4bf30635df1a46690563711324721dec800e38d79d000000006b483045022100de725038c8d2e1474b88f0c04121f18ad644596b527f65ff43732e5ee47394360220240812330bcf00a41e79e63f3e2d660d76e4dc13286653015385e5dff2638b8e0121038e8b6337a06712e40277d339b4643897e62b337b66eea2d8dd069812d7feb0a3feffffff0200000000000000006301040390d003012844a9059cbb00000000000000000000000074fafd43036239029a5dabc9463009daf4ef4a7c0000000000000000000000000000000000000000000000000000000005f5e10014f6177bc9812eeb531907621af6641a41133dea9ec210de1923020000001976a91417e7888aa7412a735f336d2f6d784caefabb6fa388ac8b8a0000\"\n}", 
            "title": "Send BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#receive-bot", 
            "text": "Launch Qtum daemon  Open a new Terminal tab   List your accounts:  $ ./qtum-cli listaddressgroupings\n[\n  [\n    [\n      \"qKjn4fStBaAtwGiwueJf9qFxgpbAvf1xAy\", \n      91.78832400, \n      \"main\"\n    ]\n  ]\n]    Pick an address to receive and give that to the person sending you the BOT", 
            "title": "Receive BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#check-bot-balance", 
            "text": "Launch Qtum daemon   Use  callcontract  to check the balance:   Function name:  balanceOf(address)  =  function signature :  70a08231  First param:  address  =  encoded address  to check balanceOf # $ ./qtum-cli callcontract contractAddress dataHex\n# dataHex:\n# function signature: 70a08231 \n# address: 0000000000000000000000004cb69aae6761e52413b948ad10689cc2428e2ef7\n$ ./qtum-cli callcontract f13f51550faaf698d09fdcc74d79335bfe19e062 70a082310000000000000000000000004cb69aae6761e52413b948ad10689cc2428e2ef7\n{\n  \"address\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n  \"executionResult\": {\n    \"gasUsed\": 23404,\n    \"excepted\": \"None\",\n    \"newAddress\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n    \"output\": \"000000000000000000000000000000000000000000000000000000000000015e\", # result\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"a040c9b3ba184d57ae0942fb70dfdeba9c436809ec66c855b2d15441c46824d8\",\n    \"gasUsed\": 23404,\n    \"bloomn    \"log\": [\n    ]\n  }\n}\n\n# output: 000000000000000000000000000000000000000000000000000000000000015e\n# converted to decimal format = 350", 
            "title": "Check BOT balance"
        }, 
        {
            "location": "/bodhi_token/qtum_cli/#parse-events-with-ethabi", 
            "text": "Launch Qtum daemon  Open a new Terminal tab  Copy the  ABI  to a file named  BodhiToken.json  and save it   How to construct the  ethabi decode log  ethabi decode log  abi-path   event-name  [-l  topic ]...  data \n# note that each \"topic\" needs to be preceeded by \"-l\"    Parsing event Transfer(address indexed _from, address indexed _to, uint256 _value):  a. Get all Transfer events  $ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]}'\n# searchlogs = command to search through transactions on the blockchain\n# 1 = starting block number\n# -1 = ending block number (-1 goes to the latest block)\n# addresses = BOT contract address\n# topics = hashes of the events to watch, ie. this is the hash of the Transfer event.\n\n# sample Transfer event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"c79bcecae6bc7611b56960be0c3c2041f9e3ebfc2e73da0357462078361ba06f\",\n        \"blockNumber\": 46831,\n        \"transactionHash\": \"32c6874925aa0d400fad4c655283ab6c18d84c003f4e4f8c3cac32675d2eff5b\",\n        \"transactionIndex\": 8,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 21422, \n        \"gasUsed\": 21422,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\", \n                    \"000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed\"\n                ],\n                \"data\": \"0000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]  b. Parse the Transfer event:  $ ethabi decode log ~/Desktop/BodhiToken.json Transfer -l ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 -l 000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed 0000000000000000000000000000000000000000000000000000000005f5e100\n\n_from d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n_to c0d3421708f1574e00959c082e75a77ff4770bed\n_value 0000000000000000000000000000000000000000000000000000000005f5e100\n# the values \"_from\", \"_to\", and \"_value\" are printed out neatly    Parsing event Mint(uint256 supply, address indexed to, uint256 amount):  a. Get all Mint events:  $ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\"]}'\n\n# sample Mint event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"8d30c1b633b5dd90f159f146e0f919b2b6271afa8c302d06fb4ed04ec733c0b8\",\n        \"blockNumber\": 46828,\n        \"transactionHash\": \"ba58122f413cb00ca83262f6be87c57b48b08bf100d90ebb5285c84b018f1d2c\",\n        \"transactionIndex\": 9,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 51789,\n        \"gasUsed\": 51789,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n                ],\n                \"data\": \"00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]  b. Parse the Mint event:  $ ethabi decode log ~/Desktop/BodhiToken.json Mint -l 4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6 -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\n\nsupply 00000000000000000000000000000000000000000000000000038d7ec889c600\nto d965cdc9eff7412a278cd9dd7dc32e022b7bada4\namount 0000000000000000000000000000000000000000000000000000000005f5e100\n# this neatly prints out the values for \"supply\", \"to\", and \"amount\"", 
            "title": "Parse Events with ethabi"
        }, 
        {
            "location": "/bodhi_core/info/", 
            "text": "Deployed Contracts\n\n\nQTUM Testnet\n\n\n\n\nEventFactory: \n85d5a6870fb450a255603ba1a34e699f759eacfb\n\n\nOracleFactory: \n770106fed472af17ecbb10034b611ca159121782", 
            "title": "Info"
        }, 
        {
            "location": "/bodhi_core/info/#deployed-contracts", 
            "text": "QTUM Testnet   EventFactory:  85d5a6870fb450a255603ba1a34e699f759eacfb  OracleFactory:  770106fed472af17ecbb10034b611ca159121782", 
            "title": "Deployed Contracts"
        }, 
        {
            "location": "/bodhi_core/topic_event/", 
            "text": "Creating TopicEvent\n\n\n\n\nLaunch QT Wallet\n\n\nClick on \nSmart Contract\n tab\n\n\nClick on \nSendTo\n sub tab\n\n\nInput the \nContract Address\n and \nInterface (ABI)\n\n\nSet the \nFunction\n to \ncreateTopic(d0613dce)\n\n\nSet the \nhash address\n of the CentralizedOracle in \naddress _oracle\n field\n\n\nSet the TopicEvent name broken down by 32 byte blocks converted to hex in the \nbytes32[10] _name\n fields\n\n\nSet the TopicEvent result names converted to hex in the \nbytes32[10] _resultName\n fields\n\n\nSet the betting end block in the \nuint256 _bettingEndBlock\n field\n\n\nSet the result setting end block in the \nuint256 _resultSettingEndBlock\n field\n\n\nSet the \nGas Limit\n to \n4000000\n (4 million gas just to be safe the transaction goes through, unused gas will be returned to you in the next coinstake transaction)\n\n\nSet the \nSender Address\n\n\nClick \nSend To Contract\n button\n\n\nWait for transaction to get mined\n\n\nOpen up the \nDebug window\n\n\n\n\nRun the command \ngettransactionreceipt (transactionId)\n:\n\n\n[\n  {\n    \"blockHash\": \"f2c4cb58f1b5d242fe5cc2f6ab1effeacc0448b5cce8f1ee4942217ac5c68cff\",\n    \"blockNumber\": 44457,\n    \"transactionHash\": \"05b35deb4f452bbbc053f0d47d3ec5560a6fc9d8837361a676a8d2dda42c80c7\",\n    \"transactionIndex\": 2,\n    \"from\": \"17e7888aa7412a735f336d2f6d784caefabb6fa3\",\n    \"to\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n    \"cumulativeGasUsed\": 3155253,\n    \"gasUsed\": 3155253,\n    \"contractAddress\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n    \"log\": [\n      {\n        \"address\": \"770106fed472af17ecbb10034b611ca159121782\",\n        \"topics\": [\n          \"c46e722c8158268af789d6a68206785f8d497869da236f87c2014c1c08fd3dec\", \n          \"000000000000000000000000a9716b4c11b5c3e9c76636967a68ccc4c1329622\", \n          \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n          \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\"\n        ],\n        \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005472756d7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f00000000000000000000000000000000000000000000000000000002540be400\"\n      }, \n      {\n        \"address\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n        \"topics\": [\n          \"b7fa6f4e0c226cf0645f9f983dbc0bb4bb971400b98fae2387487d6d810c9c56\", \n          \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\", \n          \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n          \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\"\n        ],\n        \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f\"\n      }\n    ]\n  }\n]\n# \"contractAddress\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\" is EventFactory\n# The original contract called.\n\n\n\nlog event 1: \nevent CentralizedOracleCreated\n in \nOracleFactory\n\n\n{\n    \"address\": \"770106fed472af17ecbb10034b611ca159121782\",\n    \"topics\": [\n        \"c46e722c8158268af789d6a68206785f8d497869da236f87c2014c1c08fd3dec\", \n        \"000000000000000000000000a9716b4c11b5c3e9c76636967a68ccc4c1329622\", \n        \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n        \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\"\n    ],\n    \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f00000000000000000000000000000000000000000000000000000002540be400\"\n}\n# \"address\": \"770106fed472af17ecbb10034b611ca159121782\" is OracleFactory\n\n\n\nlog event 2: \nevent TopicCreated\n in \nEventFactory\n\n\n{\n    \"address\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n    \"topics\": [\n        \"b7fa6f4e0c226cf0645f9f983dbc0bb4bb971400b98fae2387487d6d810c9c56\", \n        \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\", \n        \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n        \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\"\n    ],\n    \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f\"\n}\n# \"address\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\" is EventFactory", 
            "title": "TopicEvent"
        }, 
        {
            "location": "/bodhi_core/topic_event/#creating-topicevent", 
            "text": "Launch QT Wallet  Click on  Smart Contract  tab  Click on  SendTo  sub tab  Input the  Contract Address  and  Interface (ABI)  Set the  Function  to  createTopic(d0613dce)  Set the  hash address  of the CentralizedOracle in  address _oracle  field  Set the TopicEvent name broken down by 32 byte blocks converted to hex in the  bytes32[10] _name  fields  Set the TopicEvent result names converted to hex in the  bytes32[10] _resultName  fields  Set the betting end block in the  uint256 _bettingEndBlock  field  Set the result setting end block in the  uint256 _resultSettingEndBlock  field  Set the  Gas Limit  to  4000000  (4 million gas just to be safe the transaction goes through, unused gas will be returned to you in the next coinstake transaction)  Set the  Sender Address  Click  Send To Contract  button  Wait for transaction to get mined  Open up the  Debug window   Run the command  gettransactionreceipt (transactionId) :  [\n  {\n    \"blockHash\": \"f2c4cb58f1b5d242fe5cc2f6ab1effeacc0448b5cce8f1ee4942217ac5c68cff\",\n    \"blockNumber\": 44457,\n    \"transactionHash\": \"05b35deb4f452bbbc053f0d47d3ec5560a6fc9d8837361a676a8d2dda42c80c7\",\n    \"transactionIndex\": 2,\n    \"from\": \"17e7888aa7412a735f336d2f6d784caefabb6fa3\",\n    \"to\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n    \"cumulativeGasUsed\": 3155253,\n    \"gasUsed\": 3155253,\n    \"contractAddress\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n    \"log\": [\n      {\n        \"address\": \"770106fed472af17ecbb10034b611ca159121782\",\n        \"topics\": [\n          \"c46e722c8158268af789d6a68206785f8d497869da236f87c2014c1c08fd3dec\", \n          \"000000000000000000000000a9716b4c11b5c3e9c76636967a68ccc4c1329622\", \n          \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n          \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\"\n        ],\n        \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f00000000000000000000000000000000000000000000000000000002540be400\"\n      }, \n      {\n        \"address\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n        \"topics\": [\n          \"b7fa6f4e0c226cf0645f9f983dbc0bb4bb971400b98fae2387487d6d810c9c56\", \n          \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\", \n          \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n          \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\"\n        ],\n        \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f\"\n      }\n    ]\n  }\n]\n# \"contractAddress\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\" is EventFactory\n# The original contract called.  log event 1:  event CentralizedOracleCreated  in  OracleFactory  {\n    \"address\": \"770106fed472af17ecbb10034b611ca159121782\",\n    \"topics\": [\n        \"c46e722c8158268af789d6a68206785f8d497869da236f87c2014c1c08fd3dec\", \n        \"000000000000000000000000a9716b4c11b5c3e9c76636967a68ccc4c1329622\", \n        \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n        \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\"\n    ],\n    \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616eaf0f000000000000000000000000000000000000000000000000000000000000b02f00000000000000000000000000000000000000000000000000000002540be400\"\n}\n# \"address\": \"770106fed472af17ecbb10034b611ca159121782\" is OracleFactory  log event 2:  event TopicCreated  in  EventFactory  {\n    \"address\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\",\n    \"topics\": [\n        \"b7fa6f4e0c226cf0645f9f983dbc0bb4bb971400b98fae2387487d6d810c9c56\", \n        \"000000000000000000000000378b20ba8505a6b30b335b8d1bd243132535dfef\", \n        \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\", \n        \"00000000000000000000000017e7888aa7412a735f336d2f6d784caefabb6fa3\"\n    ],\n    \"data\": \"57686f2077696c6c20626520746865206e65787420707265736964656e7420696e20746865203230323020656c656374696f6e3fd7000000000000000000000000000000000000000000000000000000048696c617279000000000000000000000000000000000000000000000000000054686520526f636b0000000000000000000000000000000000000000000000004b616e7965205765737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af0f000000000000000000000000000000000000000000000000000000000000b02f\"\n}\n# \"address\": \"85d5a6870fb450a255603ba1a34e699f759eacfb\" is EventFactory", 
            "title": "Creating TopicEvent"
        }, 
        {
            "location": "/qtum/qt_wallet/", 
            "text": "Downloads\n\n\n\n\nQT Wallet - find latest release and download installer:\n\n\nhttps://github.com/qtumproject/qtum/releases\n\n\n\n\n\n\n\n\nLaunch QT Wallet\n\n\nIn your Terminal window, go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run:\n\n\n$ ./qtum-qt --logevents\n\n\n\nPlease note you might get a message asking you to reindex. If that is the case, run with this command:\n\n\n$ ./qtum-qt --logevents --reindex\n\n\n\nConvert Qtum Address to Hash\n\n\n\n\n\n\nWith QT Wallet open, select \nHelp\n \n \nDebug window\n\n\n\n\n\n\n\n\nSelect the \nConsole\n tab\n\n\n\n\n\n\nType the command: \ngethexaddress (yourQtumAddress)\n\n\n\n\n\n\n\n\nOutput is the hash address", 
            "title": "QT Wallet (Desktop)"
        }, 
        {
            "location": "/qtum/qt_wallet/#downloads", 
            "text": "QT Wallet - find latest release and download installer:  https://github.com/qtumproject/qtum/releases", 
            "title": "Downloads"
        }, 
        {
            "location": "/qtum/qt_wallet/#launch-qt-wallet", 
            "text": "In your Terminal window, go to your  qtum-x.xx.x/bin  folder that you installed it in and run:  $ ./qtum-qt --logevents  Please note you might get a message asking you to reindex. If that is the case, run with this command:  $ ./qtum-qt --logevents --reindex", 
            "title": "Launch QT Wallet"
        }, 
        {
            "location": "/qtum/qt_wallet/#convert-qtum-address-to-hash", 
            "text": "With QT Wallet open, select  Help     Debug window     Select the  Console  tab    Type the command:  gethexaddress (yourQtumAddress)     Output is the hash address", 
            "title": "Convert Qtum Address to Hash"
        }, 
        {
            "location": "/deployment/", 
            "text": "Qtum Testnet\n\n\n\n\nEnter source code dir\n\n\nAssuming tools \nSolidity\n \n \nEthabi\n are installed\n\n\n\n\nCompile solidity code\n\n\n$ solc --optimize --bin --abi --hashes --allow-paths libs/* -o bodhitoken --overwrite tokens/BodhiToken.sol\n$ ls bodhitoken\n# corresponding files compiled\nBasicToken.abi           BodhiToken.bin           ERC20.signatures         Ownable.abi              SafeMath.bin             StandardToken.signatures\nBasicToken.bin           BodhiToken.signatures    ERC20Basic.abi           Ownable.bin              SafeMath.signatures      lib\nBasicToken.signatures    ERC20.abi                ERC20Basic.bin           Ownable.signatures       StandardToken.abi\nBodhiToken.abi           ERC20.bin                ERC20Basic.signatures    SafeMath.abi             StandardToken.bin\n\n\n\n\n\n\n\nEnsure qtum testnet is running\n\n\n$ bin/qtumd -testnet -logevents\n# `-logevents` is optional for event log, you may be asked to add -reindex if existing local db is init without event logs\n\n\n\n\n\n\n\nGenerate owner address\n\n\n$ bin/qtum-cli -testnet getaccountaddress bodhi-owner\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n$ bin/qtum-cli -testnet listaccounts\n{\n  \"\": 0.00000000,\n  \"bodhi-owner\": 0.00000000\n}\n\n\n\nNote: \ntestnet\n addresses starts with \nq\n and \nmainnet\n addresses starts with \nQ\n\n\nIf your balance is 0, please request test tokens at \nhttp://testnet-faucet.qtum.info/#!/\n and verify it:\n\n\n$ bin/qtum-cli -testnet getbalance\n94.00000000\n\n\n\n\n\n\n\nCopy previous compiled smartcontract binary code\n\n\n# mac only\n$ pbcopy \n /yourpath/bodhitoken/BodhiToken.bin\n\n\n\n\n\n\n\nCreate contract using smartcontract binary code\n\n\n$ bin/qtum-cli -testnet createcontract 6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a031617905561080d806100396000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166.... 2500000 0.0000004 qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n# Deployment succeeds:\n{\n  \"txid\": \"72b0f2eeeb29b6c3ebf5808ec075d07aeedbf37f546c007367ee50bb11300b60\",\n  \"sender\": \"qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\",\n  \"hash160\": \"dcc48d3cfd6976545cb9bcf525ebad3a1b60d3bd\",\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\"\n}\n# sender: should match your own account\n# address: the address for the deployed smart contract\n# hash160: hashed address of the sender\n\n\n\n\n\n\n\nVerification: your new contract should appear when you \nlistcontracts\n\n\n$ bin/qtum-cli -testnet listcontracts\n{\n\"ddce483f940efe54a9f46f95486489b65092b68f\": 0.00000000,\n...\n}\n\n\n\nGet interface of smart contract\n\n\n$ bin/qtum-cli -testnet getaccountinfo ddce483f940efe54a9f46f95486489b65092b68f\n{\n  \"address\": \"ddce483f940efe54a9f46f95486489b65092b68f\",\n  \"balance\": 0,\n  \"storage\": {\n    \"036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\": {\n      \"0000000000000000000000000000000000000000000000000000000000000005\": \"6800000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace\": {\n      \"0000000000000000000000000000000000000000000000000000000000000002\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000004\": \"0000000000000000000000000000000000000000000000000000000000000001\"\n    },\n    \"a50c72e4d7b00e75c6ec9cbfb411824ce1bc8c910cb84e72aed31d83c0caaf5a\": {\n      \"e5d6541440c456f878016c6ac621d20fa7af44175ddebd0295194adfa766ddf6\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000003\": \"7200000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\": {\n      \"0000000000000000000000000000000000000000000000000000000000000006\": \"48312e3000000000000000000000000000000000000000000000000000000008\"\n    }\n  },\n  \"code\": \"606060405236156100ad576000357c0100000000000000000...\"\n}\n\n\n\n\n\n\n\nCall the smart contract\n\n\n$ cat /yourpath/bodhitoken/BodhiToken.signatures\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)\n\n\n\nCalling a function. i.e. name()\n\n\n$ bin/qtum-cli -testnet callcontract cde3c5db274b7f38377a66607c5a9ca6889dea3b 06fdde03\n{\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n  \"executionResult\": {\n    \"gasUsed\": 21839,\n    \"excepted\": \"None\",\n    \"newAddress\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n    \"output\": \"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\",\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"4f2fd1cc369abf4120a509dc4ffeac19e058ff5e5988d1609ee0b5996cbb752a\",\n    \"gasUsed\": 21839,\n    \"bloomn    \"log\": [\n    ]\n  }\n}\n\n\n\nDecode output to verify the correctness\n\n\n$ ethabi decode params -t string 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\nstring Bodhi Token\n\n\n\n\n\n\n\ncallcontract\n vs \nsendtocontract\n\n\ncallcontract\n - This will interact with an already deployed smart contract on the Qtum blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas.\n\n\nsendtocontract\n - This will interact with an already deployed smart contract on the Qtum blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas.", 
            "title": "Contract Deployment"
        }, 
        {
            "location": "/deployment/#qtum-testnet", 
            "text": "Enter source code dir  Assuming tools  Solidity     Ethabi  are installed   Compile solidity code  $ solc --optimize --bin --abi --hashes --allow-paths libs/* -o bodhitoken --overwrite tokens/BodhiToken.sol\n$ ls bodhitoken\n# corresponding files compiled\nBasicToken.abi           BodhiToken.bin           ERC20.signatures         Ownable.abi              SafeMath.bin             StandardToken.signatures\nBasicToken.bin           BodhiToken.signatures    ERC20Basic.abi           Ownable.bin              SafeMath.signatures      lib\nBasicToken.signatures    ERC20.abi                ERC20Basic.bin           Ownable.signatures       StandardToken.abi\nBodhiToken.abi           ERC20.bin                ERC20Basic.signatures    SafeMath.abi             StandardToken.bin    Ensure qtum testnet is running  $ bin/qtumd -testnet -logevents\n# `-logevents` is optional for event log, you may be asked to add -reindex if existing local db is init without event logs    Generate owner address  $ bin/qtum-cli -testnet getaccountaddress bodhi-owner\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n$ bin/qtum-cli -testnet listaccounts\n{\n  \"\": 0.00000000,\n  \"bodhi-owner\": 0.00000000\n}  Note:  testnet  addresses starts with  q  and  mainnet  addresses starts with  Q  If your balance is 0, please request test tokens at  http://testnet-faucet.qtum.info/#!/  and verify it:  $ bin/qtum-cli -testnet getbalance\n94.00000000    Copy previous compiled smartcontract binary code  # mac only\n$ pbcopy   /yourpath/bodhitoken/BodhiToken.bin    Create contract using smartcontract binary code  $ bin/qtum-cli -testnet createcontract 6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a031617905561080d806100396000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166.... 2500000 0.0000004 qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n# Deployment succeeds:\n{\n  \"txid\": \"72b0f2eeeb29b6c3ebf5808ec075d07aeedbf37f546c007367ee50bb11300b60\",\n  \"sender\": \"qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\",\n  \"hash160\": \"dcc48d3cfd6976545cb9bcf525ebad3a1b60d3bd\",\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\"\n}\n# sender: should match your own account\n# address: the address for the deployed smart contract\n# hash160: hashed address of the sender    Verification: your new contract should appear when you  listcontracts  $ bin/qtum-cli -testnet listcontracts\n{\n\"ddce483f940efe54a9f46f95486489b65092b68f\": 0.00000000,\n...\n}  Get interface of smart contract  $ bin/qtum-cli -testnet getaccountinfo ddce483f940efe54a9f46f95486489b65092b68f\n{\n  \"address\": \"ddce483f940efe54a9f46f95486489b65092b68f\",\n  \"balance\": 0,\n  \"storage\": {\n    \"036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\": {\n      \"0000000000000000000000000000000000000000000000000000000000000005\": \"6800000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace\": {\n      \"0000000000000000000000000000000000000000000000000000000000000002\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000004\": \"0000000000000000000000000000000000000000000000000000000000000001\"\n    },\n    \"a50c72e4d7b00e75c6ec9cbfb411824ce1bc8c910cb84e72aed31d83c0caaf5a\": {\n      \"e5d6541440c456f878016c6ac621d20fa7af44175ddebd0295194adfa766ddf6\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000003\": \"7200000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\": {\n      \"0000000000000000000000000000000000000000000000000000000000000006\": \"48312e3000000000000000000000000000000000000000000000000000000008\"\n    }\n  },\n  \"code\": \"606060405236156100ad576000357c0100000000000000000...\"\n}    Call the smart contract  $ cat /yourpath/bodhitoken/BodhiToken.signatures\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)  Calling a function. i.e. name()  $ bin/qtum-cli -testnet callcontract cde3c5db274b7f38377a66607c5a9ca6889dea3b 06fdde03\n{\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n  \"executionResult\": {\n    \"gasUsed\": 21839,\n    \"excepted\": \"None\",\n    \"newAddress\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n    \"output\": \"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\",\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"4f2fd1cc369abf4120a509dc4ffeac19e058ff5e5988d1609ee0b5996cbb752a\",\n    \"gasUsed\": 21839,\n    \"bloomn    \"log\": [\n    ]\n  }\n}  Decode output to verify the correctness  $ ethabi decode params -t string 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\nstring Bodhi Token    callcontract  vs  sendtocontract  callcontract  - This will interact with an already deployed smart contract on the Qtum blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas.  sendtocontract  - This will interact with an already deployed smart contract on the Qtum blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas.", 
            "title": "Qtum Testnet"
        }, 
        {
            "location": "/help/", 
            "text": "Further Help\n\n\nIf you need further assistance, you can reach me at:\n\n\nEmail: \nderic@bodhi.network\n\n\nTelegram: \nhttps://t.me/dwalintukan\n\n\nMkdocs Markdown\n\n\nFor full documentation visit \nmkdocs.org\n.", 
            "title": "Help"
        }, 
        {
            "location": "/help/#further-help", 
            "text": "If you need further assistance, you can reach me at:  Email:  deric@bodhi.network  Telegram:  https://t.me/dwalintukan", 
            "title": "Further Help"
        }, 
        {
            "location": "/help/#mkdocs-markdown", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Mkdocs Markdown"
        }
    ]
}
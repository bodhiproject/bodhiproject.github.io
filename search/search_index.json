{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nBodhi Prediction Market: the next generation decentralized prediction market\n\n\nhttps://www.bodhi.network/\n\n\nTelegram\n\n\nhttps://t.me/bodhifoundation\n\n\nTwitter\n\n\nhttps://twitter.com/bodhitoken", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Bodhi Prediction Market: the next generation decentralized prediction market  https://www.bodhi.network/  Telegram  https://t.me/bodhifoundation  Twitter  https://twitter.com/bodhitoken", 
            "title": "Welcome"
        }, 
        {
            "location": "/bodhi_token/info/", 
            "text": "Deployed Contracts\n\n\nQTUM Mainnet\n\n\n\n\n6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\n\n\n\n\nQTUM Testnet\n\n\n\n\na619b1a87d4f17fb56e347887b971094918b016c\n\n\n\n\nBOT Units\n\n\n\n\n8 decimals\n\n\n1 Botoshi = lowest denomination of BOT\n\n\n100000000 Botoshi = 1 BOT\n\n\n\n\nInterface (ABI)\n\n\n[{\nconstant\n:true,\ninputs\n:[],\nname\n:\nname\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nstring\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:false,\ninputs\n:[{\nname\n:\n_spender\n,\ntype\n:\naddress\n},{\nname\n:\n_value\n,\ntype\n:\nuint256\n}],\nname\n:\napprove\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nbool\n}],\npayable\n:false,\nstateMutability\n:\nnonpayable\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[],\nname\n:\ntotalSupply\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nuint256\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:false,\ninputs\n:[{\nname\n:\n_from\n,\ntype\n:\naddress\n},{\nname\n:\n_to\n,\ntype\n:\naddress\n},{\nname\n:\n_value\n,\ntype\n:\nuint256\n}],\nname\n:\ntransferFrom\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nbool\n}],\npayable\n:false,\nstateMutability\n:\nnonpayable\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[],\nname\n:\ndecimals\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nuint256\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:false,\ninputs\n:[{\nname\n:\n_to\n,\ntype\n:\naddress\n},{\nname\n:\n_amount\n,\ntype\n:\nuint256\n}],\nname\n:\nmintByOwner\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nbool\n}],\npayable\n:false,\nstateMutability\n:\nnonpayable\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[{\nname\n:\n_owner\n,\ntype\n:\naddress\n}],\nname\n:\nbalanceOf\n,\noutputs\n:[{\nname\n:\nbalance\n,\ntype\n:\nuint256\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[],\nname\n:\nowner\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\naddress\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[],\nname\n:\nsymbol\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nstring\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:false,\ninputs\n:[{\nname\n:\n_to\n,\ntype\n:\naddress\n},{\nname\n:\n_value\n,\ntype\n:\nuint256\n}],\nname\n:\ntransfer\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nbool\n}],\npayable\n:false,\nstateMutability\n:\nnonpayable\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[{\nname\n:\n_owner\n,\ntype\n:\naddress\n},{\nname\n:\n_spender\n,\ntype\n:\naddress\n}],\nname\n:\nallowance\n,\noutputs\n:[{\nname\n:\nremaining\n,\ntype\n:\nuint256\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\nconstant\n:false,\ninputs\n:[{\nname\n:\nnewOwner\n,\ntype\n:\naddress\n}],\nname\n:\ntransferOwnership\n,\noutputs\n:[],\npayable\n:false,\nstateMutability\n:\nnonpayable\n,\ntype\n:\nfunction\n},{\nconstant\n:true,\ninputs\n:[],\nname\n:\ntokenTotalSupply\n,\noutputs\n:[{\nname\n:\n,\ntype\n:\nuint256\n}],\npayable\n:false,\nstateMutability\n:\nview\n,\ntype\n:\nfunction\n},{\ninputs\n:[],\npayable\n:false,\nstateMutability\n:\nnonpayable\n,\ntype\n:\nconstructor\n},{\nanonymous\n:false,\ninputs\n:[{\nindexed\n:false,\nname\n:\nsupply\n,\ntype\n:\nuint256\n},{\nindexed\n:true,\nname\n:\nto\n,\ntype\n:\naddress\n},{\nindexed\n:false,\nname\n:\namount\n,\ntype\n:\nuint256\n}],\nname\n:\nMint\n,\ntype\n:\nevent\n},{\nanonymous\n:false,\ninputs\n:[{\nindexed\n:true,\nname\n:\n_owner\n,\ntype\n:\naddress\n},{\nindexed\n:true,\nname\n:\n_spender\n,\ntype\n:\naddress\n},{\nindexed\n:false,\nname\n:\n_value\n,\ntype\n:\nuint256\n}],\nname\n:\nApproval\n,\ntype\n:\nevent\n},{\nanonymous\n:false,\ninputs\n:[{\nindexed\n:true,\nname\n:\n_from\n,\ntype\n:\naddress\n},{\nindexed\n:true,\nname\n:\n_to\n,\ntype\n:\naddress\n},{\nindexed\n:false,\nname\n:\n_value\n,\ntype\n:\nuint256\n}],\nname\n:\nTransfer\n,\ntype\n:\nevent\n}]\n\n\n\n\nFunction Signatures\n\n\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)\n\n\n\n\nEvent Hashes\n\n\nevent Mint(uint256 supply, address indexed to, uint256 amount): \n4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value):\nddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", 
            "title": "Info"
        }, 
        {
            "location": "/bodhi_token/info/#deployed-contracts", 
            "text": "QTUM Mainnet   6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7   QTUM Testnet   a619b1a87d4f17fb56e347887b971094918b016c", 
            "title": "Deployed Contracts"
        }, 
        {
            "location": "/bodhi_token/info/#bot-units", 
            "text": "8 decimals  1 Botoshi = lowest denomination of BOT  100000000 Botoshi = 1 BOT", 
            "title": "BOT Units"
        }, 
        {
            "location": "/bodhi_token/info/#interface-abi", 
            "text": "[{ constant :true, inputs :[], name : name , outputs :[{ name : , type : string }], payable :false, stateMutability : view , type : function },{ constant :false, inputs :[{ name : _spender , type : address },{ name : _value , type : uint256 }], name : approve , outputs :[{ name : , type : bool }], payable :false, stateMutability : nonpayable , type : function },{ constant :true, inputs :[], name : totalSupply , outputs :[{ name : , type : uint256 }], payable :false, stateMutability : view , type : function },{ constant :false, inputs :[{ name : _from , type : address },{ name : _to , type : address },{ name : _value , type : uint256 }], name : transferFrom , outputs :[{ name : , type : bool }], payable :false, stateMutability : nonpayable , type : function },{ constant :true, inputs :[], name : decimals , outputs :[{ name : , type : uint256 }], payable :false, stateMutability : view , type : function },{ constant :false, inputs :[{ name : _to , type : address },{ name : _amount , type : uint256 }], name : mintByOwner , outputs :[{ name : , type : bool }], payable :false, stateMutability : nonpayable , type : function },{ constant :true, inputs :[{ name : _owner , type : address }], name : balanceOf , outputs :[{ name : balance , type : uint256 }], payable :false, stateMutability : view , type : function },{ constant :true, inputs :[], name : owner , outputs :[{ name : , type : address }], payable :false, stateMutability : view , type : function },{ constant :true, inputs :[], name : symbol , outputs :[{ name : , type : string }], payable :false, stateMutability : view , type : function },{ constant :false, inputs :[{ name : _to , type : address },{ name : _value , type : uint256 }], name : transfer , outputs :[{ name : , type : bool }], payable :false, stateMutability : nonpayable , type : function },{ constant :true, inputs :[{ name : _owner , type : address },{ name : _spender , type : address }], name : allowance , outputs :[{ name : remaining , type : uint256 }], payable :false, stateMutability : view , type : function },{ constant :false, inputs :[{ name : newOwner , type : address }], name : transferOwnership , outputs :[], payable :false, stateMutability : nonpayable , type : function },{ constant :true, inputs :[], name : tokenTotalSupply , outputs :[{ name : , type : uint256 }], payable :false, stateMutability : view , type : function },{ inputs :[], payable :false, stateMutability : nonpayable , type : constructor },{ anonymous :false, inputs :[{ indexed :false, name : supply , type : uint256 },{ indexed :true, name : to , type : address },{ indexed :false, name : amount , type : uint256 }], name : Mint , type : event },{ anonymous :false, inputs :[{ indexed :true, name : _owner , type : address },{ indexed :true, name : _spender , type : address },{ indexed :false, name : _value , type : uint256 }], name : Approval , type : event },{ anonymous :false, inputs :[{ indexed :true, name : _from , type : address },{ indexed :true, name : _to , type : address },{ indexed :false, name : _value , type : uint256 }], name : Transfer , type : event }]", 
            "title": "Interface (ABI)"
        }, 
        {
            "location": "/bodhi_token/info/#function-signatures", 
            "text": "dd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)", 
            "title": "Function Signatures"
        }, 
        {
            "location": "/bodhi_token/info/#event-hashes", 
            "text": "event Mint(uint256 supply, address indexed to, uint256 amount): \n4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value):\nddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", 
            "title": "Event Hashes"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/", 
            "text": "Downloads\n\n\n\n\nQtum mobile apps:\n\n\nAndroid\n\n\niOS\n\n\n\n\n\n\n\n\nWatch BOT\n\n\n\n\nDownload the mobile app and launch it\n\n\n\n\nClick on \nProfile\n tab\n\n\n\n\n\n\n\n\nClick on \nSmart Contracts\n\n\n\n\n\n\n\n\nClick on \nWatch Token\n\n\n\n\n\n\n\n\nAdd \nToken Name\n: BOT\n\n\n\n\nCopy/paste the \nToken Address\n (see \nDeployed Contracts\n Mainnet address above)\n\n\nCopy/paste the \nABI Interface\n (see \nInterface (ABI)\n above)\n\n\n\n\nClick \nOK\n button\n\n\n\n\n\n\n\n\nSend BOT\n\n\n\n\nDownload the mobile app and launch it\n\n\nFollow steps to \nWatch Bot\n\n\n\n\nClick on \nSend\n Tab\n\n\n\n\n\n\n\n\nAdd the \nReceiver's Address\n of the person you want to send BOT to\n\n\n\n\nClick \nChoose Token\n dropdown and select \nBOT\n\n\n\n\nEnter the \nAmount\n to send in decimal format\n\n\n\n\n\n\n\n\nClick the \nSend\n button\n\n\n\n\nWait for the transaction to be mined\n\n\n\n\nReceive BOT\n\n\n\n\nDownload the mobile app and launch it\n\n\nThe address shown in the \nWallet\n tab is your main address\n\n\n\n\nClick on the \n+\n sign next to the address\n\n\n\n\n\n\n\n\nClick on the \nCopy Wallet Address\n button\n\n\n\n\n\n\n\n\nGive that address to the person sending the BOT to you", 
            "title": "Qtum Wallet Mobile"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#downloads", 
            "text": "Qtum mobile apps:  Android  iOS", 
            "title": "Downloads"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#watch-bot", 
            "text": "Download the mobile app and launch it   Click on  Profile  tab     Click on  Smart Contracts     Click on  Watch Token     Add  Token Name : BOT   Copy/paste the  Token Address  (see  Deployed Contracts  Mainnet address above)  Copy/paste the  ABI Interface  (see  Interface (ABI)  above)   Click  OK  button", 
            "title": "Watch BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#send-bot", 
            "text": "Download the mobile app and launch it  Follow steps to  Watch Bot   Click on  Send  Tab     Add the  Receiver's Address  of the person you want to send BOT to   Click  Choose Token  dropdown and select  BOT   Enter the  Amount  to send in decimal format     Click the  Send  button   Wait for the transaction to be mined", 
            "title": "Send BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_wallet_mobile/#receive-bot", 
            "text": "Download the mobile app and launch it  The address shown in the  Wallet  tab is your main address   Click on the  +  sign next to the address     Click on the  Copy Wallet Address  button     Give that address to the person sending the BOT to you", 
            "title": "Receive BOT"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/", 
            "text": "Downloads\n\n\n\n\nQT wallet/qtum-cli - find latest release and download installer:\n\n\nhttps://github.com/qtumproject/qtum/releases\n\n\n\n\n\n\nEthabi (if using the qtum-cli)\n\n\nhttps://github.com/paritytech/ethabi\n \n\n\n\n\n\n\n\n\nConvert Qtum Address to Hash\n\n\n\n\nWith QT Wallet open, select Help \n Debug window\n\n\nSelect the Console tab\n\n\nType the command: \ngethexaddress (yourQtumAddress)\n\n\nOutput is the hash address\n\n\n\n\nWatch BOT in QT Wallet\n\n\n\n\nLaunch QT Wallet - Go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n    \n$ ./qtum-qt\n\n\nIn the \nOverview\n tab, click the \nAdd Token\n button\n\n\nCopy/paste the token address in \nContract Address\n\n\nSelect the \nToken Address\n which you would like to monitor BOT activity on\n\n\nClick on the \nConfirm\n button\n\n\nYou should now see \nBOT\n being monitored in the \nOverview\n and \nQRC Token\n tabs\n\n\n\n\nSend BOT with QT Wallet (Easy)\n\n\n\n\nLaunch QT Wallet - Go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n    \n$ ./qtum-qt\n\n\nAdd Bodhi Token to your QT Wallet (see above)\n\n\nIn the \nQRC Token\n tab, click the \nSend\n button\n\n\nIn the \nPayTo\n field, add the address you would like to send BOT to\n\n\nIn the \nAmount\n field, type in the amount to send (in \nBotoshi\n)\n\n\n(Optional) In the \nDescription\n field, add a note for reference\n\n\nClick the \nConfirm\n button, then a popup window will appear to confirm\n\n\nWait for the timer in the \nYes\n button to finish, then click it\n\n\nWait until your transaction is mined\n\n\n\n\nReceive BOT with QT Wallet\n\n\n\n\nLaunch QT Wallet - Go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n    \n$ ./qtum-qt\n\n\nClick on \nFile\n \n \nReceiving addresses...\n\n\nSelect the address you would like the BOT sent to then click \nCopy\n\n\nGive that address to the person sending the BOT to you\n\n\n\n\nSend BOT with QT Wallet (Hard)\n\n\n\n\n\n\nLaunch QT Wallet - Go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n    \n$ ./qtum-qt\n\n\n\n\n\n\nCheck for QTUM balance\n    Your QT Wallet should launch and start syncing. Wait for the syncing to be done. In the main Overview screen, you should see if you have available QTUM.\n\n\n\n\n\n\nCheck for BOT balance\n\n\n\n\nClick on \nSmart Contract\n \n \nCall\n\n\nCopy and paste the contract address\n\n\nCopy and paste the \nBodhiToken ABI\n\n\nSelect \nFunction\n \n \nbalanceOf(70a08231)\n\n\nGet your \nhash address\n and paste it\n\n\nClick the \nCall Contract\n button\n\n\n\n\n\n\n\n\nTransfer BOT to another address\n\n\n\n\nClick on \nSmart Contract\n \n \nSendTo\n\n\nCopy and paste the contract address\n\n\nCopy and paste the \nBodhiToken ABI\n\n\nSelect \nFunction\n \n \ntransfer(a9059cbb)\n\n\nGet the \nhash address\n you want to send to and paste it\n\n\nType in the value as the amount to send to that address (in \nBotoshi\n)\n\n\nSelect the \nSender Address\n at the bottom as the address that contains the BOT\n\n\nClick the \nSend To Contract\n button\n\n\nWait for your transaction to be mined\n\n\n\n\n\n\n\n\nSend BOT with qtum-cli\n\n\n\n\n\n\nLaunch Qtum daemon: go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n\n\n$ ./qtumd\n\n\n\n\n\n\n\nOpen a new Terminal tab\n\n\n\n\n\n\nCheck for account: Make sure you have a valid Qtum address that has some QTUM (for the transaction fee) and BOT for transferring.\n\n\n$ ./qtum-cli listaccounts\n{\n  \"\": -238.19753958,\n  \"deric\": 248.78550718,\n  \"tester1\": 15.08267720\n}\n# My example shows 2 accounts: deric \n tester1. \n# If you don\u2019t see any accounts, go to Step 2. \n# Otherwise, go to Step 3.\n\n\n\n\n\n\n\nCreating an account\n\n\n$ ./qtum-cli getaccountaddress \u201cyourAccountName\u201d\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n\n\n\n\n\n\nTransferring QTUM to your account: You will need some QTUM in your accounts to be able to transfer BOT. If you need to transfer some QTUM to your address from a different QTUM address.\n\n\na. Encrypt wallet: \nhttps://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial\n\n\nb. Save your passphrase words\n\n\nc. Unlock wallet\n\n\n$ ./qtum-cli walletpassphrase \u201cyour passphase words\u201d numOfSecondsToKeepUnlocked\n\n\n\nd. Transfer QTUM\n\n\n$ ./qtum-cli sendtoaddress \u201caddressToSendQtum\u201d amountToSend\nde639bb266a4143d56fe24d64fe21d416847fcbc16cd51b8d4eeb04818af0628\n\n\n\ne. Wait until your transaction is confirmed. You can check with:\n\n\n$ ./qtum-cli gettransaction de639bb266a4143d56fe24d64fe21d416847fcbc16cd51b8d4eeb04818af0628\n\n\n\n\n\n\n\nTransfer Bodhi Tokens using transfer(address, uint256)\n\n\n# sendtocontract help\nArguments:\n1. \"contractAddress\" (string, required) The contract address that will receive the funds and data.\n2. \"dataHex\"  (string, required) data to send.\n3. \"amount\"      (numeric or string, optional) The amount in QTUM to send. eg 0.1, default: 0\n4. gasLimit  (numeric or string, optional) gasLimit, default: 250000, max: 40000000\n5. gasPrice  (numeric or string, optional) gasPrice Qtum price per gas unit, default: 0.0000004, min:0.0000004\n6. \"senderAddress\" (string, optional) The quantum address that will be used as sender.\n\n$ ./qtum-cli sendtocontract contractAddress dataHex amount gasLimit gasPrice senderAddress\n\n\n\nConstructing the \ndataHex\n for \ntransfer(address, uint256)\n:\n\n\nThis data string is hex of data which consists of function name, value of parameters. All parts of hex strings need to be concatenated together with no space in between.\n\n\n\n\nFunction name: transfer() = function signature: \na9059cbb\n\n\n\n\nFirst param: address param = Recipient address of BOT. Need to get the encoded address first\n\n\n$ ./qtum-cli gethexaddress QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# hash address:\nd965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n$ ethabi encode params -v address d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n# encoded address with ethabi\n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n\n\n\n\n\n\nSecond parameter: uint256 param = amount to send to in lowest denomination of BOT (Botoshi). \n\n\n$ ethabi encode params -v uint 10000 --lenient\n0000000000000000000000000000000000000000000000000000000000002710\n\n\n\n\n\n\n\nNow we have all the params we need encoded properly:\n\n\na9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710\n\n\n\nFinally the last arguments in the call:\n\n\n\n\namount\n = 0\n\n\ngasLimit\n = 250000\n\n\ngasPrice\n = 0.0000004\n\n\nsenderAddress\n = QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n\n\n\n\nExecute the transfer():\n\n\n$ ./qtum-cli sendtocontract f13f51550faaf698d09fdcc74d79335bfe19e062 a9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710 0 250000 0.0000004 QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# transaction receipt\n{\n  \"txid\": \"25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\",\n  \"sender\": \"QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\",\n  \"hash160\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n}\n\n\n\n\n\n\n\nCheck the BOT balance of your address\n\n\n# $ ./qtum-cli callcontract contractAddress dataHex\n# dataHex = function signature: 70a08231 + encodedAddressToCheckBalanceOf\n$ ./qtum-cli callcontract f13f51550faaf698d09fdcc74d79335bfe19e062 70a082310000000000000000000000004cb69aae6761e52413b948ad10689cc2428e2ef7\n{\n  \"address\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n  \"executionResult\": {\n    \"gasUsed\": 23404,\n    \"excepted\": \"None\",\n    \"newAddress\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n    \"output\": \"000000000000000000000000000000000000000000000000000000000000015e\", \n--\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"a040c9b3ba184d57ae0942fb70dfdeba9c436809ec66c855b2d15441c46824d8\",\n    \"gasUsed\": 23404,\n    \"bloomn    \"log\": [\n    ]\n  }\n}\n\n\n\noutput: 000000000000000000000000000000000000000000000000000000000000015e\n\n\nThis is the hex return value of \nbalanceOf()\n. Converted to decimals, it is \n350\n.\n\n\n\n\n\n\nReceive BOT with qtum-cli\n\n\n\n\n\n\nLaunch Qtum daemon: go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n\n\n$ ./qtumd\n\n\n\n\n\n\n\nOpen a new Terminal tab\n\n\n\n\n\n\nList your accounts:\n\n\n$ ./qtum-cli listaccounts\n{\n  \"\": -569.38821838,\n  \"deric\": 576.02622998,\n  \"tester1\": 15.08267720\n}\n\n\n\n\n\n\n\nFind the addresses of your accounts:\n\n\n$ ./qtum-cli getaddressesbyaccount deric\n[\n  \"qQZ1GB4db8jVaBmzyw7dsoSDqEAGN7Bfov\", \n  \"qQnvzVjK2xASAkvEwfmEAiG2vZPUQrF6Cg\"\n]\n\n\n\n\n\n\n\nPick an address to receive and give that to the person sending you the BOT\n\n\n\n\n\n\nParse Events with ethabi\n\n\n\n\n\n\nLaunch Qtum daemon: go to your \nqtum-x.xx.x/bin\n folder that you installed it in and run in Terminal:\n\n\n$ ./qtumd\n\n\n\n\n\n\n\nOpen a new Terminal tab\n\n\n\n\nCopy the \nABI\n to a file named \nBodhiToken.json\n and save it\n\n\n\n\nHow to construct the \nethabi decode log\n\n\nethabi decode log \nabi-path\n \nevent-name\n [-l \ntopic\n]... \ndata\n\n# note that each \"topic\" needs to be preceeded by \"-l\"\n\n\n\n\n\n\n\nParsing event Transfer(address indexed _from, address indexed _to, uint256 _value):\n\n\na. Get all Transfer events\n\n\n$ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]}'\n# searchlogs = command to search through transactions on the blockchain\n# 1 = starting block number\n# -1 = ending block number (-1 goes to the latest block)\n# addresses = BOT contract address\n# topics = hashes of the events to watch, ie. this is the hash of the Transfer event.\n\n# sample Transfer event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"c79bcecae6bc7611b56960be0c3c2041f9e3ebfc2e73da0357462078361ba06f\",\n        \"blockNumber\": 46831,\n        \"transactionHash\": \"32c6874925aa0d400fad4c655283ab6c18d84c003f4e4f8c3cac32675d2eff5b\",\n        \"transactionIndex\": 8,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 21422, \n        \"gasUsed\": 21422,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\", \n                    \"000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed\"\n                ],\n                \"data\": \"0000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]\n\n\n\nb. Parse the Transfer event:\n\n\n$ ethabi decode log ~/Desktop/BodhiToken.json Transfer -l ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 -l 000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed 0000000000000000000000000000000000000000000000000000000005f5e100\n\n_from d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n_to c0d3421708f1574e00959c082e75a77ff4770bed\n_value 0000000000000000000000000000000000000000000000000000000005f5e100\n# the values \"_from\", \"_to\", and \"_value\" are printed out neatly\n\n\n\n\n\n\n\nParsing event Mint(uint256 supply, address indexed to, uint256 amount):\n\n\na. Get all Mint events:\n\n\n$ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\"]}'\n\n# sample Mint event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"8d30c1b633b5dd90f159f146e0f919b2b6271afa8c302d06fb4ed04ec733c0b8\",\n        \"blockNumber\": 46828,\n        \"transactionHash\": \"ba58122f413cb00ca83262f6be87c57b48b08bf100d90ebb5285c84b018f1d2c\",\n        \"transactionIndex\": 9,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 51789,\n        \"gasUsed\": 51789,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n                ],\n                \"data\": \"00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]\n\n\n\nb. Parse the Mint event:\n\n\n$ ethabi decode log ~/Desktop/BodhiToken.json Mint -l 4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6 -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\n\nsupply 00000000000000000000000000000000000000000000000000038d7ec889c600\nto d965cdc9eff7412a278cd9dd7dc32e022b7bada4\namount 0000000000000000000000000000000000000000000000000000000005f5e100\n# this neatly prints out the values for \"supply\", \"to\", and \"amount\"", 
            "title": "Qtum Clients"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#downloads", 
            "text": "QT wallet/qtum-cli - find latest release and download installer:  https://github.com/qtumproject/qtum/releases    Ethabi (if using the qtum-cli)  https://github.com/paritytech/ethabi", 
            "title": "Downloads"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#convert-qtum-address-to-hash", 
            "text": "With QT Wallet open, select Help   Debug window  Select the Console tab  Type the command:  gethexaddress (yourQtumAddress)  Output is the hash address", 
            "title": "Convert Qtum Address to Hash"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#watch-bot-in-qt-wallet", 
            "text": "Launch QT Wallet - Go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:\n     $ ./qtum-qt  In the  Overview  tab, click the  Add Token  button  Copy/paste the token address in  Contract Address  Select the  Token Address  which you would like to monitor BOT activity on  Click on the  Confirm  button  You should now see  BOT  being monitored in the  Overview  and  QRC Token  tabs", 
            "title": "Watch BOT in QT Wallet"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#send-bot-with-qt-wallet-easy", 
            "text": "Launch QT Wallet - Go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:\n     $ ./qtum-qt  Add Bodhi Token to your QT Wallet (see above)  In the  QRC Token  tab, click the  Send  button  In the  PayTo  field, add the address you would like to send BOT to  In the  Amount  field, type in the amount to send (in  Botoshi )  (Optional) In the  Description  field, add a note for reference  Click the  Confirm  button, then a popup window will appear to confirm  Wait for the timer in the  Yes  button to finish, then click it  Wait until your transaction is mined", 
            "title": "Send BOT with QT Wallet (Easy)"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#receive-bot-with-qt-wallet", 
            "text": "Launch QT Wallet - Go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:\n     $ ./qtum-qt  Click on  File     Receiving addresses...  Select the address you would like the BOT sent to then click  Copy  Give that address to the person sending the BOT to you", 
            "title": "Receive BOT with QT Wallet"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#send-bot-with-qt-wallet-hard", 
            "text": "Launch QT Wallet - Go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:\n     $ ./qtum-qt    Check for QTUM balance\n    Your QT Wallet should launch and start syncing. Wait for the syncing to be done. In the main Overview screen, you should see if you have available QTUM.    Check for BOT balance   Click on  Smart Contract     Call  Copy and paste the contract address  Copy and paste the  BodhiToken ABI  Select  Function     balanceOf(70a08231)  Get your  hash address  and paste it  Click the  Call Contract  button     Transfer BOT to another address   Click on  Smart Contract     SendTo  Copy and paste the contract address  Copy and paste the  BodhiToken ABI  Select  Function     transfer(a9059cbb)  Get the  hash address  you want to send to and paste it  Type in the value as the amount to send to that address (in  Botoshi )  Select the  Sender Address  at the bottom as the address that contains the BOT  Click the  Send To Contract  button  Wait for your transaction to be mined", 
            "title": "Send BOT with QT Wallet (Hard)"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#send-bot-with-qtum-cli", 
            "text": "Launch Qtum daemon: go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:  $ ./qtumd    Open a new Terminal tab    Check for account: Make sure you have a valid Qtum address that has some QTUM (for the transaction fee) and BOT for transferring.  $ ./qtum-cli listaccounts\n{\n  \"\": -238.19753958,\n  \"deric\": 248.78550718,\n  \"tester1\": 15.08267720\n}\n# My example shows 2 accounts: deric   tester1. \n# If you don\u2019t see any accounts, go to Step 2. \n# Otherwise, go to Step 3.    Creating an account  $ ./qtum-cli getaccountaddress \u201cyourAccountName\u201d\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN    Transferring QTUM to your account: You will need some QTUM in your accounts to be able to transfer BOT. If you need to transfer some QTUM to your address from a different QTUM address.  a. Encrypt wallet:  https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial  b. Save your passphrase words  c. Unlock wallet  $ ./qtum-cli walletpassphrase \u201cyour passphase words\u201d numOfSecondsToKeepUnlocked  d. Transfer QTUM  $ ./qtum-cli sendtoaddress \u201caddressToSendQtum\u201d amountToSend\nde639bb266a4143d56fe24d64fe21d416847fcbc16cd51b8d4eeb04818af0628  e. Wait until your transaction is confirmed. You can check with:  $ ./qtum-cli gettransaction de639bb266a4143d56fe24d64fe21d416847fcbc16cd51b8d4eeb04818af0628    Transfer Bodhi Tokens using transfer(address, uint256)  # sendtocontract help\nArguments:\n1. \"contractAddress\" (string, required) The contract address that will receive the funds and data.\n2. \"dataHex\"  (string, required) data to send.\n3. \"amount\"      (numeric or string, optional) The amount in QTUM to send. eg 0.1, default: 0\n4. gasLimit  (numeric or string, optional) gasLimit, default: 250000, max: 40000000\n5. gasPrice  (numeric or string, optional) gasPrice Qtum price per gas unit, default: 0.0000004, min:0.0000004\n6. \"senderAddress\" (string, optional) The quantum address that will be used as sender.\n\n$ ./qtum-cli sendtocontract contractAddress dataHex amount gasLimit gasPrice senderAddress  Constructing the  dataHex  for  transfer(address, uint256) :  This data string is hex of data which consists of function name, value of parameters. All parts of hex strings need to be concatenated together with no space in between.   Function name: transfer() = function signature:  a9059cbb   First param: address param = Recipient address of BOT. Need to get the encoded address first  $ ./qtum-cli gethexaddress QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# hash address:\nd965cdc9eff7412a278cd9dd7dc32e022b7bada4\n\n$ ethabi encode params -v address d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n# encoded address with ethabi\n000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4    Second parameter: uint256 param = amount to send to in lowest denomination of BOT (Botoshi).   $ ethabi encode params -v uint 10000 --lenient\n0000000000000000000000000000000000000000000000000000000000002710    Now we have all the params we need encoded properly:  a9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710  Finally the last arguments in the call:   amount  = 0  gasLimit  = 250000  gasPrice  = 0.0000004  senderAddress  = QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF   Execute the transfer():  $ ./qtum-cli sendtocontract f13f51550faaf698d09fdcc74d79335bfe19e062 a9059cbb000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada40000000000000000000000000000000000000000000000000000000000002710 0 250000 0.0000004 QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\n# transaction receipt\n{\n  \"txid\": \"25af2f8cc32e76b52b39175336612f0ae568906216667e6482421edce2909f72\",\n  \"sender\": \"QgRUhP8sLMCNKrzwtW4xU5DF8CCTeiA3sF\",\n  \"hash160\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n}    Check the BOT balance of your address  # $ ./qtum-cli callcontract contractAddress dataHex\n# dataHex = function signature: 70a08231 + encodedAddressToCheckBalanceOf\n$ ./qtum-cli callcontract f13f51550faaf698d09fdcc74d79335bfe19e062 70a082310000000000000000000000004cb69aae6761e52413b948ad10689cc2428e2ef7\n{\n  \"address\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n  \"executionResult\": {\n    \"gasUsed\": 23404,\n    \"excepted\": \"None\",\n    \"newAddress\": \"a619b1a87d4f17fb56e347887b971094918b016c\",\n    \"output\": \"000000000000000000000000000000000000000000000000000000000000015e\",  --\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"a040c9b3ba184d57ae0942fb70dfdeba9c436809ec66c855b2d15441c46824d8\",\n    \"gasUsed\": 23404,\n    \"bloomn    \"log\": [\n    ]\n  }\n}  output: 000000000000000000000000000000000000000000000000000000000000015e  This is the hex return value of  balanceOf() . Converted to decimals, it is  350 .", 
            "title": "Send BOT with qtum-cli"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#receive-bot-with-qtum-cli", 
            "text": "Launch Qtum daemon: go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:  $ ./qtumd    Open a new Terminal tab    List your accounts:  $ ./qtum-cli listaccounts\n{\n  \"\": -569.38821838,\n  \"deric\": 576.02622998,\n  \"tester1\": 15.08267720\n}    Find the addresses of your accounts:  $ ./qtum-cli getaddressesbyaccount deric\n[\n  \"qQZ1GB4db8jVaBmzyw7dsoSDqEAGN7Bfov\", \n  \"qQnvzVjK2xASAkvEwfmEAiG2vZPUQrF6Cg\"\n]    Pick an address to receive and give that to the person sending you the BOT", 
            "title": "Receive BOT with qtum-cli"
        }, 
        {
            "location": "/bodhi_token/qtum_clients/#parse-events-with-ethabi", 
            "text": "Launch Qtum daemon: go to your  qtum-x.xx.x/bin  folder that you installed it in and run in Terminal:  $ ./qtumd    Open a new Terminal tab   Copy the  ABI  to a file named  BodhiToken.json  and save it   How to construct the  ethabi decode log  ethabi decode log  abi-path   event-name  [-l  topic ]...  data \n# note that each \"topic\" needs to be preceeded by \"-l\"    Parsing event Transfer(address indexed _from, address indexed _to, uint256 _value):  a. Get all Transfer events  $ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]}'\n# searchlogs = command to search through transactions on the blockchain\n# 1 = starting block number\n# -1 = ending block number (-1 goes to the latest block)\n# addresses = BOT contract address\n# topics = hashes of the events to watch, ie. this is the hash of the Transfer event.\n\n# sample Transfer event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"c79bcecae6bc7611b56960be0c3c2041f9e3ebfc2e73da0357462078361ba06f\",\n        \"blockNumber\": 46831,\n        \"transactionHash\": \"32c6874925aa0d400fad4c655283ab6c18d84c003f4e4f8c3cac32675d2eff5b\",\n        \"transactionIndex\": 8,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 21422, \n        \"gasUsed\": 21422,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\", \n                    \"000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed\"\n                ],\n                \"data\": \"0000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]  b. Parse the Transfer event:  $ ethabi decode log ~/Desktop/BodhiToken.json Transfer -l ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 -l 000000000000000000000000c0d3421708f1574e00959c082e75a77ff4770bed 0000000000000000000000000000000000000000000000000000000005f5e100\n\n_from d965cdc9eff7412a278cd9dd7dc32e022b7bada4\n_to c0d3421708f1574e00959c082e75a77ff4770bed\n_value 0000000000000000000000000000000000000000000000000000000005f5e100\n# the values \"_from\", \"_to\", and \"_value\" are printed out neatly    Parsing event Mint(uint256 supply, address indexed to, uint256 amount):  a. Get all Mint events:  $ ./qtum-cli searchlogs 1 -1 '{\"addresses\": [\"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\"]}' '{\"topics\": [\"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\"]}'\n\n# sample Mint event fetched from searchlogs call\n[\n    {\n        \"blockHash\": \"8d30c1b633b5dd90f159f146e0f919b2b6271afa8c302d06fb4ed04ec733c0b8\",\n        \"blockNumber\": 46828,\n        \"transactionHash\": \"ba58122f413cb00ca83262f6be87c57b48b08bf100d90ebb5285c84b018f1d2c\",\n        \"transactionIndex\": 9,\n        \"from\": \"d965cdc9eff7412a278cd9dd7dc32e022b7bada4\",\n        \"to\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"cumulativeGasUsed\": 51789,\n        \"gasUsed\": 51789,\n        \"contractAddress\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n        \"log\": [\n            {\n                \"address\": \"6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7\",\n                \"topics\": [\n                    \"4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6\", \n                    \"000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4\"\n                ],\n                \"data\": \"00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\"\n            }\n        ]\n    }\n]  b. Parse the Mint event:  $ ethabi decode log ~/Desktop/BodhiToken.json Mint -l 4e3883c75cc9c752bb1db2e406a822e4a75067ae77ad9a0a4d179f2709b9e1f6 -l 000000000000000000000000d965cdc9eff7412a278cd9dd7dc32e022b7bada4 00000000000000000000000000000000000000000000000000038d7ec889c6000000000000000000000000000000000000000000000000000000000005f5e100\n\nsupply 00000000000000000000000000000000000000000000000000038d7ec889c600\nto d965cdc9eff7412a278cd9dd7dc32e022b7bada4\namount 0000000000000000000000000000000000000000000000000000000005f5e100\n# this neatly prints out the values for \"supply\", \"to\", and \"amount\"", 
            "title": "Parse Events with ethabi"
        }, 
        {
            "location": "/bodhi_token/qbao/", 
            "text": "Downloads\n\n\n\n\nQBao mobile apps:\n\n\nAndroid\n\n\niOS: link coming soon\n\n\n\n\n\n\n\n\nSend BOT\n\n\n\n\nDownload and launch the mobile app\n\n\n\n\nClick on \nBOT\n in the list of different tokens\n\n\n\n\n\n\n\n\nClick on \nTransfer\n button\n\n\n\n\n\n\n\n\nEnter the \nReceiver Address\n of the person you are sending it to\n\n\n\n\nEnter the \nAmount\n to send in decimal format\n\n\n\n\nMake sure \nBOT\n is selected in the dropdown menu\n\n\n\n\n\n\n\n\nClick the \nConfirm Transfer\n button\n\n\n\n\n\n\nWait for your transaction to be mined\n\n\n\n\n\n\n\n\nReceive BOT\n\n\n\n\nDownload and launch the mobile app\n\n\n\n\nClick on the \nQR Code\n button\n\n\n\n\n\n\n\n\nClick the \nCopy Address\n button\n\n\n\n\n\n\n\n\nGive that address to the person sending the BOT to you", 
            "title": "QBao"
        }, 
        {
            "location": "/bodhi_token/qbao/#downloads", 
            "text": "QBao mobile apps:  Android  iOS: link coming soon", 
            "title": "Downloads"
        }, 
        {
            "location": "/bodhi_token/qbao/#send-bot", 
            "text": "Download and launch the mobile app   Click on  BOT  in the list of different tokens     Click on  Transfer  button     Enter the  Receiver Address  of the person you are sending it to   Enter the  Amount  to send in decimal format   Make sure  BOT  is selected in the dropdown menu     Click the  Confirm Transfer  button    Wait for your transaction to be mined", 
            "title": "Send BOT"
        }, 
        {
            "location": "/bodhi_token/qbao/#receive-bot", 
            "text": "Download and launch the mobile app   Click on the  QR Code  button     Click the  Copy Address  button     Give that address to the person sending the BOT to you", 
            "title": "Receive BOT"
        }, 
        {
            "location": "/deployment/", 
            "text": "Qtum Testnet\n\n\n\n\nEnter source code dir\n\n\nAssuming tools \nSolidity\n \n \nEthabi\n are installed\n\n\n\n\nCompile solidity code\n\n\n$ solc --optimize --bin --abi --hashes --allow-paths libs/* -o bodhitoken --overwrite tokens/BodhiToken.sol\n$ ls bodhitoken\n# corresponding files compiled\nBasicToken.abi           BodhiToken.bin           ERC20.signatures         Ownable.abi              SafeMath.bin             StandardToken.signatures\nBasicToken.bin           BodhiToken.signatures    ERC20Basic.abi           Ownable.bin              SafeMath.signatures      lib\nBasicToken.signatures    ERC20.abi                ERC20Basic.bin           Ownable.signatures       StandardToken.abi\nBodhiToken.abi           ERC20.bin                ERC20Basic.signatures    SafeMath.abi             StandardToken.bin\n\n\n\n\n\n\n\nEnsure qtum testnet is running\n\n\n$ bin/qtumd -testnet -logevents\n# `-logevents` is optional for event log, you may be asked to add -reindex if existing local db is init without event logs\n\n\n\n\n\n\n\nGenerate owner address\n\n\n$ bin/qtum-cli -testnet getaccountaddress bodhi-owner\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n$ bin/qtum-cli -testnet listaccounts\n{\n  \"\": 0.00000000,\n  \"bodhi-owner\": 0.00000000\n}\n\n\n\nNote: \ntestnet\n addresses starts with \nq\n and \nmainnet\n addresses starts with \nQ\n\n\nIf your balance is 0, please request test tokens at \nhttp://testnet-faucet.qtum.info/#!/\n and verify it:\n\n\n$ bin/qtum-cli -testnet getbalance\n94.00000000\n\n\n\n\n\n\n\nCopy previous compiled smartcontract binary code\n\n\n# mac only\n$ pbcopy \n /yourpath/bodhitoken/BodhiToken.bin\n\n\n\n\n\n\n\nCreate contract using smartcontract binary code\n\n\n$ bin/qtum-cli -testnet createcontract 6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a031617905561080d806100396000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166.... 2500000 0.0000004 qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n# Deployment succeeds:\n{\n  \"txid\": \"72b0f2eeeb29b6c3ebf5808ec075d07aeedbf37f546c007367ee50bb11300b60\",\n  \"sender\": \"qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\",\n  \"hash160\": \"dcc48d3cfd6976545cb9bcf525ebad3a1b60d3bd\",\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\"\n}\n# sender: should match your own account\n# address: the address for the deployed smart contract\n# hash160: hashed address of the sender\n\n\n\n\n\n\n\nVerification: your new contract should appear when you \nlistcontracts\n\n\n$ bin/qtum-cli -testnet listcontracts\n{\n\"ddce483f940efe54a9f46f95486489b65092b68f\": 0.00000000,\n...\n}\n\n\n\nGet interface of smart contract\n\n\n$ bin/qtum-cli -testnet getaccountinfo ddce483f940efe54a9f46f95486489b65092b68f\n{\n  \"address\": \"ddce483f940efe54a9f46f95486489b65092b68f\",\n  \"balance\": 0,\n  \"storage\": {\n    \"036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\": {\n      \"0000000000000000000000000000000000000000000000000000000000000005\": \"6800000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace\": {\n      \"0000000000000000000000000000000000000000000000000000000000000002\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000004\": \"0000000000000000000000000000000000000000000000000000000000000001\"\n    },\n    \"a50c72e4d7b00e75c6ec9cbfb411824ce1bc8c910cb84e72aed31d83c0caaf5a\": {\n      \"e5d6541440c456f878016c6ac621d20fa7af44175ddebd0295194adfa766ddf6\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000003\": \"7200000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\": {\n      \"0000000000000000000000000000000000000000000000000000000000000006\": \"48312e3000000000000000000000000000000000000000000000000000000008\"\n    }\n  },\n  \"code\": \"606060405236156100ad576000357c0100000000000000000...\"\n}\n\n\n\n\n\n\n\nCall the smart contract\n\n\n$ cat /yourpath/bodhitoken/BodhiToken.signatures\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)\n\n\n\nCalling a function. i.e. name()\n\n\n$ bin/qtum-cli -testnet callcontract cde3c5db274b7f38377a66607c5a9ca6889dea3b 06fdde03\n{\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n  \"executionResult\": {\n    \"gasUsed\": 21839,\n    \"excepted\": \"None\",\n    \"newAddress\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n    \"output\": \"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\",\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"4f2fd1cc369abf4120a509dc4ffeac19e058ff5e5988d1609ee0b5996cbb752a\",\n    \"gasUsed\": 21839,\n    \"bloomn    \"log\": [\n    ]\n  }\n}\n\n\n\nDecode output to verify the correctness\n\n\n$ ethabi decode params -t string 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\nstring Bodhi Token\n\n\n\n\n\n\n\ncallcontract\n vs \nsendtocontract\n\n\ncallcontract\n - This will interact with an already deployed smart contract on the Qtum blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas.\n\n\nsendtocontract\n - This will interact with an already deployed smart contract on the Qtum blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas.", 
            "title": "Contract Deployment"
        }, 
        {
            "location": "/deployment/#qtum-testnet", 
            "text": "Enter source code dir  Assuming tools  Solidity     Ethabi  are installed   Compile solidity code  $ solc --optimize --bin --abi --hashes --allow-paths libs/* -o bodhitoken --overwrite tokens/BodhiToken.sol\n$ ls bodhitoken\n# corresponding files compiled\nBasicToken.abi           BodhiToken.bin           ERC20.signatures         Ownable.abi              SafeMath.bin             StandardToken.signatures\nBasicToken.bin           BodhiToken.signatures    ERC20Basic.abi           Ownable.bin              SafeMath.signatures      lib\nBasicToken.signatures    ERC20.abi                ERC20Basic.bin           Ownable.signatures       StandardToken.abi\nBodhiToken.abi           ERC20.bin                ERC20Basic.signatures    SafeMath.abi             StandardToken.bin    Ensure qtum testnet is running  $ bin/qtumd -testnet -logevents\n# `-logevents` is optional for event log, you may be asked to add -reindex if existing local db is init without event logs    Generate owner address  $ bin/qtum-cli -testnet getaccountaddress bodhi-owner\nqdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n$ bin/qtum-cli -testnet listaccounts\n{\n  \"\": 0.00000000,\n  \"bodhi-owner\": 0.00000000\n}  Note:  testnet  addresses starts with  q  and  mainnet  addresses starts with  Q  If your balance is 0, please request test tokens at  http://testnet-faucet.qtum.info/#!/  and verify it:  $ bin/qtum-cli -testnet getbalance\n94.00000000    Copy previous compiled smartcontract binary code  # mac only\n$ pbcopy   /yourpath/bodhitoken/BodhiToken.bin    Create contract using smartcontract binary code  $ bin/qtum-cli -testnet createcontract 6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a031617905561080d806100396000396000f300606060405236156100c25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166.... 2500000 0.0000004 qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\n\n# Deployment succeeds:\n{\n  \"txid\": \"72b0f2eeeb29b6c3ebf5808ec075d07aeedbf37f546c007367ee50bb11300b60\",\n  \"sender\": \"qdghGtMxvfxPzdSJHNvJhN6gpzZSYdLDRN\",\n  \"hash160\": \"dcc48d3cfd6976545cb9bcf525ebad3a1b60d3bd\",\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\"\n}\n# sender: should match your own account\n# address: the address for the deployed smart contract\n# hash160: hashed address of the sender    Verification: your new contract should appear when you  listcontracts  $ bin/qtum-cli -testnet listcontracts\n{\n\"ddce483f940efe54a9f46f95486489b65092b68f\": 0.00000000,\n...\n}  Get interface of smart contract  $ bin/qtum-cli -testnet getaccountinfo ddce483f940efe54a9f46f95486489b65092b68f\n{\n  \"address\": \"ddce483f940efe54a9f46f95486489b65092b68f\",\n  \"balance\": 0,\n  \"storage\": {\n    \"036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0\": {\n      \"0000000000000000000000000000000000000000000000000000000000000005\": \"6800000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace\": {\n      \"0000000000000000000000000000000000000000000000000000000000000002\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000004\": \"0000000000000000000000000000000000000000000000000000000000000001\"\n    },\n    \"a50c72e4d7b00e75c6ec9cbfb411824ce1bc8c910cb84e72aed31d83c0caaf5a\": {\n      \"e5d6541440c456f878016c6ac621d20fa7af44175ddebd0295194adfa766ddf6\": \"00000000000000000000000000000000000000000000000000000000000001f4\"\n    },\n    \"c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\": {\n      \"0000000000000000000000000000000000000000000000000000000000000003\": \"7200000000000000000000000000000000000000000000000000000000000002\"\n    },\n    \"f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\": {\n      \"0000000000000000000000000000000000000000000000000000000000000006\": \"48312e3000000000000000000000000000000000000000000000000000000008\"\n    }\n  },\n  \"code\": \"606060405236156100ad576000357c0100000000000000000...\"\n}    Call the smart contract  $ cat /yourpath/bodhitoken/BodhiToken.signatures\ndd62ed3e: allowance(address,address)\n095ea7b3: approve(address,uint256)\n70a08231: balanceOf(address)\n313ce567: decimals()\n3542aee2: mintByOwner(address,uint256)\n06fdde03: name()\n8da5cb5b: owner()\n95d89b41: symbol()\nf7abab9e: tokenTotalSupply()\n18160ddd: totalSupply()\na9059cbb: transfer(address,uint256)\n23b872dd: transferFrom(address,address,uint256)\nf2fde38b: transferOwnership(address)  Calling a function. i.e. name()  $ bin/qtum-cli -testnet callcontract cde3c5db274b7f38377a66607c5a9ca6889dea3b 06fdde03\n{\n  \"address\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n  \"executionResult\": {\n    \"gasUsed\": 21839,\n    \"excepted\": \"None\",\n    \"newAddress\": \"cde3c5db274b7f38377a66607c5a9ca6889dea3b\",\n    \"output\": \"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\",\n    \"codeDeposit\": 0,\n    \"gasRefunded\": 0,\n    \"depositSize\": 0,\n    \"gasForDeposit\": 0\n  },\n  \"transactionReceipt\": {\n    \"stateRoot\": \"4f2fd1cc369abf4120a509dc4ffeac19e058ff5e5988d1609ee0b5996cbb752a\",\n    \"gasUsed\": 21839,\n    \"bloomn    \"log\": [\n    ]\n  }\n}  Decode output to verify the correctness  $ ethabi decode params -t string 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b426f64686920546f6b656e000000000000000000000000000000000000000000\nstring Bodhi Token    callcontract  vs  sendtocontract  callcontract  - This will interact with an already deployed smart contract on the Qtum blockchain, with all computation taking place off-chain and no persistence to the blockchain. This does not require gas.  sendtocontract  - This will interact with an already deployed smart contract on the Qtum blockchain. All computation takes place on-chain and any state changes will be persisted to the blockchain. This allows tokens to be sent to a smart contract. This requires gas.", 
            "title": "Qtum Testnet"
        }, 
        {
            "location": "/help/", 
            "text": "Further Help\n\n\nIf you need further assistance, you can reach me at:\n\n\nEmail: \nderic@bodhi.network\n\n\nTelegram: \nhttps://t.me/dwalintukan\n\n\nMkdocs Markdown\n\n\nFor full documentation visit \nmkdocs.org\n.", 
            "title": "Help"
        }, 
        {
            "location": "/help/#further-help", 
            "text": "If you need further assistance, you can reach me at:  Email:  deric@bodhi.network  Telegram:  https://t.me/dwalintukan", 
            "title": "Further Help"
        }, 
        {
            "location": "/help/#mkdocs-markdown", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Mkdocs Markdown"
        }
    ]
}